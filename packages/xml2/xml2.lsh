(defnamespace xml2 '())



(in-namespace xml2-
(libload "xml2_config")

#? * Constant: <NODE_MANAGED>
;;  - used in node constructor to specifiy class managed dallocation
(defconstant xml2-NODE_MANAGED 1)
(defconstant NODE_MANAGED 1)
#? * Constant: <NODE_UNMANAGED>
;;  - used in node constructor to specifiy libxml2 managed dallocation
(defconstant xml2-NODE_UNMANAGED 0)
(defconstant NODE_UNMANAGED 0)

;;//----------------------------------- utility fns
;;  fun isNull[t]: t -> bool = "(0==$1)";
#? (is-null <p>)
;; Tests pointer for NULL value
(defun is-null (p)
  (declare (-gptr-) p)
  (to-bool #{ ($p == 0) #}))

(defun xml-parse-file (file)
  (declare (-str-) file)
  (let ((xmldocptr (to-gptr ())))
    (declare (-gptr-) xmldocptr)
    #{ $xmldocptr = xmlParseFile($file); #}
    xmldocptr))

(defun xml-parse-string (s)
  (declare (-str-) s)
  (let ((xdoc (to-gptr ()))
	(l (length s)))
    (declare (-gptr-) xdoc)
    (declare (-int-) l)
    #{ $xdoc = xmlParseMemory($s,$l); #}
    xdoc))

(defun html-parse-file (file enc)
  (declare (-str-) file)
  (declare (-str-) enc)
  (let ((xmldocptr (to-gptr ())))
    (declare (-gptr-) xmldocptr)
    #{ $xmldocptr = htmlParseFile($file,$enc); #}
    xmldocptr))

(defun html-parse-string (s)
    (declare (-str-) s)
  (let ((xmldocptr (to-gptr ())))
    (declare (-gptr-) xmldocptr)
    #{ $xmldocptr = htmlParseDoc((xmlChar *) $s,NULL); #}
    xmldocptr))



;;cenum xmlParserOption = 
(defconstant    XML_PARSE_RECOVER 1) ;;  : recover on errors
(defconstant    XML_PARSE_NOENT 2) ;;  : substitute entities
(defconstant    XML_PARSE_DTDLOAD 4) ;;  : load the external subset
(defconstant    XML_PARSE_DTDATTR 8) ;;  : default DTD attributes
(defconstant    XML_PARSE_DTDVALID 16) ;;  : validate with the DTD
(defconstant    XML_PARSE_NOERROR 32) ;; : suppress error reports
(defconstant    XML_PARSE_NOWARNING 64) ;; : suppress warning reports
(defconstant    XML_PARSE_PEDANTIC 128) ;; : pedantic error reporting
(defconstant    XML_PARSE_NOBLANKS 256) ;; : remove blank nodes
(defconstant    XML_PARSE_SAX1 512) ;; : use the SAX1 interface internally
(defconstant    XML_PARSE_XINCLUDE 1024) ;; : Implement XInclude substitition
(defconstant    XML_PARSE_NONET 2048) ;; : Forbid network access
(defconstant    XML_PARSE_NODICT 4096) ;; : Do not reuse the context dictionnary
(defconstant    XML_PARSE_NSCLEAN 8192) ;; : remove redundant namespaces declarations
(defconstant    XML_PARSE_NOCDATA 16384) ;; : merge CDATA as text nodes
(defconstant    XML_PARSE_NOXINCNODE 32768) ;; : do not generate XINCLUDE START/END nodes
(defconstant    XML_PARSE_COMPACT 65536) ;; : compact small text nodes; no modification of the tree allowed afterwards (will possibly crash if you try to modify the tree)
(defconstant    XML_PARSE_OLD10 131072) ;; : parse using XML-1.0 before update 5 
(defconstant   XML_PARSE_NOBASEFIX 262144) ;; : do not fixup XINCLUDE xml:base uris
(defconstant    XML_PARSE_HUGE 524288) ;; : relax any hardcoded limit from the parser
(defconstant    XML_PARSE_OLDSAX 1048576) ;; : parse using SAX2 interface from before 2.7.0

;;  typedef xml_parser_option = xmlParserOption;
;;  publish "parses string document fragment in context of supplied node xml_parse_errors"
(defun xml-parse-in-node-context (ctxxmlnodeptr s parseropt xmlnodeptr)
  (declare (-gptr- "xmlNodePtr") ctxxmlnodeptr)
  (declare (-str-) s)
  (declare (-int-) parseropt)
  (declare (-gptr- "xmlNodePtr") xmlnodeptr)
  (let ((ret 0)
	(l (length s)))
    (declare (-int-) ret)
    (declare (-int-) l)
    #{ $ret = (int)xmlParseInNodeContext($ctxxmlnodeptr,$s,$l,$parseropt,& $xmlnodeptr);#}
    ret))
  
;;//------------------------------------ tree definitions
;;  
;;  type xml_ns_ptr   = "xmlNsPtr";
;;  type void_ptr     = "void *";
;;  type xml_dtd_ptr  = "xmlDtdPtr";
;;  type xml_element_type = "xmlElementType";
;  cstruct xmlNode {
;     _private:void_ptr;	    //application data
;    type:xml_element_type;  // XML_ATTRIBUTE_DECL, must be second !
;    name:xml_char_ptr;      // Attribute name
;    children:xml_node_ptr;  // NULL
;    last:xml_node_ptr;      // NULL
;    parent:xml_dtd_ptr;	    // -> DTD
;    next:xml_node_ptr;      // next sibling link
;    prev:xml_node_ptr;      // previous sibling link
;    doc:xml_doc_ptr;        // the containing document
;    ns:xml_ns_ptr;          // pointer to the associated namespace
;    content:xml_char_ptr;   // the content
;    properties:xml_attr_ptr;// properties list
;    nsDef:xml_ns_ptr;       // namespace definitions on this node
;    psvi:void_ptr;          // for type/PSVI informations
;    line:ushort;            // line number
;    extra:ushort;           // extra data for XPath/XSLT
;  };

(defun xml-doc-dump (FILE doc)
  (declare (-gptr- "FILE*") FILE) (declare (-gptr- "xmlDocPtr") doc)
  (let ((ret 0))
    (declare (-int-) ret)
    #{ $ret = xmlDocDump($FILE,$doc); #}
    ret))
(defun xml-free-node (nodeptr)
  (declare (-gptr- "xmlNodePtr") nodeptr)
  #{ xmlFreeNode($nodeptr); #}
  t)

(defun xml-free-node-list (nodeptr)
  (declare (-gptr- "xmlNodePtr") nodeptr)
  #{ xmlFreeNodeList($nodeptr); #}
  t)

;Dump an XML document in memory and return the #xmlChar * and it's size in bytes. It's up to the caller to free the memory with xml_free(). The resulting byte array is zero terminated, though the last 0 is not included in the returned size.
;cur:	the document
;mem:	OUT: the memory pointer
;size:	OUT: the memory length
;"""
(defun xml-doc-dump-memory (docptr)
  (declare (-gptr- "xmlDocPtr") docptr) 
  (let ((s "")
	(sz 0))
    (declare (-str-) s) (declare (-int-) sz)
    #{ xmlChar *t_tcmp = NULL; 
    xmlDocDumpMemory($docptr,(xmlChar **) & t_tcmp,& $sz);
    $s = (char *) malloc(sizeof(char)*$sz+4);
    strcpy($s,(char *)t_tcmp);
    xmlFree(t_tcmp);
    #}
    s))

(defun xml-new-doc (doc)
  (declare (-str-) doc)
  (let ((docptr (to-gptr ())))
    #{ $docptr = xmlNewDoc((const xmlChar *) $doc); #}
    docptr))

(defun xml-new-dtd (docptr s1 s2 s3) ;: xml_doc_ptr*string*string*string->xml_dtd_ptr = 
  (declare (-gptr- "xmlDocPtr") docptr)
  (declare (-str-) s1)(declare (-str-) s2)(declare (-str-) s3)
  (let ((dtdptr (to-gptr ())))
    #{ $dtdptr = xmlNewDtd($docptr,(const xmlChar *)$s1,(const xmlChar *)$s2, (const xmlChar *)$s3); #}
    dtdptr
))

(defun xml-create-int-subset (docptr s1 s2 s3) 
  (declare (-gptr- "xmlDocPtr") docptr)
  (declare (-str-) s1)(declare (-str-) s2)(declare (-str-) s3)
  (let ((dtdptr (to-gptr ())))
    #{ $dtdptr = xmlCreateIntSubset($docptr,(const xmlChar *)$s1,(const xmlChar *)$s2,(const xmlChar *)$s3); #}
    dtdptr))

(defun xml-new-html-dtd (docptr) ;: xml_doc_ptr->xml_dtd_ptr = 
  (declare (-gptr- "xmlDocPtr") docptr)
  (let ((dtdptr (to-gptr ())))
    #{ $dtdptr = xmlNewDtd($docptr,(const xmlChar *)"HTML",NULL,NULL); #}
    dtdptr))

(defun xml-parse-local-dtd (s)
  (declare (-str-) s)
    (let ((dtdptr (to-gptr ())))
      #{ $dtdptr = xmlParseDTD(NULL,(const xmlChar *)$s); #}
      dtdptr))

(defun xml-parse-external-dtd(s)
  (declare (-str-) s)
  (let ((dtdptr (to-gptr ())))
      #{ $dtdptr = xmlParseDTD((const xmlChar *)$s,NULL); #}
    dtdptr))

;  publish " xml"
(defun xml-new-node-ns (nsptr s)
  (declare (-gptr- "xmlNsPtr") nsptr)
  (declare (-str-) s)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlNewNode($nsptr,(const xmlChar *)($s)); #} 
    nodeptr))

(defun xml-new-node (s)
  (declare (-str-) s)
  (let ((nodeptr (to-gptr ())))
    #{ $nodeptr = xmlNewNode(NULL,(const xmlChar *)($s)) #}
    nodeptr))

#? (xml-new-ns <nodeptr> <href> <prefix>)
;; Creation of a new Namespace. This function will refuse to create a 
;; namespace with a similar prefix than an existing one present on this node. 
;; We use href==NULL in the case of an element creation where the namespace 
;; was not defined.
;;
;; node:	the element carrying the namespace
;; href:	the URI associated
;; prefix:	the prefix for the namespace
;; Returns:	a new namespace pointer or NULL
(defun xml-new-ns (nodeptr s1 s2)
  (declare (-gptr- "xmlNodePtr") nodeptr)
  (declare (-str-) s1) (declare (-str-) s2)
  (let ((ns (to-gptr ())))
    (declare (-gptr- "xmlNsPtr") ns)
    #{ $ns = xmlNewNs($nodeptr,(const xmlChar *)$s1,(const xmlChar *)$s2); #}
    ns))

(defun xml-new-text (s)
  (declare (-str-) s)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlNewText((const xmlChar *)$s); #}
    nodeptr))

(defun xml-add-child (nodeptr1 nodeptr2)
  (declare (-gptr- "xmlNodePtr") nodeptr1)
  (declare (-gptr- "xmlNodePtr") nodeptr2)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlAddChildList($nodeptr1,$nodeptr2); #}
    nodeptr))

;  publish "parent:xml_node_ptr,namespace:xml_ns_ptr,name:string,content:string";
(defun xml-new-child (nodeptr1 nsptr s1 s2)
  (declare (-gptr- "xmlNodePtr") nodeptr1)
  (declare (-gptr- "xmlNsPtr") nsptr)
  (declare (-str-) s1)
  (declare (-str-) s2)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr"))
    #{  $nodeptr = xmlNewChild($nodeptr1,$nsptr,(const xmlChar *)($s1),(const xmlChar *)($s2)); #}
    nodeptr))

;  publish "parent:xml_node_ptr,namespace:xml_ns_ptr,name:string,content:string";
(defun xml-new-text-child (nodeptr1 nsptr s1 s2)
  (declare (-gptr- "xmlNodePtr") nodeptr1)
  (declare (-gptr- "xmlNsPtr") nsptr)
  (declare (-str-) s1)
  (declare (-str-) s2)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr"))
    #{  $nodeptr = xmlNewTextChild($nodeptr1,$nsptr,(const xmlChar *)($s1),(const xmlChar *)($s2)); #}
    nodeptr))

(defun xml-doc-get-root-element (docptr)
  (declare (-gptr- "xmlDocPtr") docptr)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr"))
    #{  $nodeptr = xmlDocGetRootElement($docptr); #}
    nodeptr))

(defun xml-doc-set-root-element (docptr nodeptr)
  (declare (-gptr- "xmlDocPtr") docptr)
  (declare (-gptr- "xmlNodePtr") nodeptr)
  #{xmlDocSetRootElement($docptr,$nodeptr); #}
t)

(defun xml-new-cdata-block (docptr s1)
  (declare (-gptr- "xmlDocPtr") docptr)
  (declare (-str-) s1)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlNewCDataBlock($docptr,(const xmlChar *)$s1,strlen($s1)); #}
    nodeptr))

(defun xml-node-get-content (nodeptr) ; xml_node_ptr->xml_char_ptr 
  (declare (-gptr- "xmlNodePtr") nodeptr)
  (let ((s ""))
    (declare (-str-) s)
    #{ $s = (char *)xmlNodeGetContent($nodeptr); #}
    s))


(defun xml-node-set-content (nodeptr s) ; xml_node_ptr*xml_char_ptr
  (declare (-gptr- "xmlNodePtr") nodeptr)
  (declare (-str-) s)
  #{ xmlNodeSetContent($nodeptr,(const xmlChar *) $s); #}
  s)

(defun xml-add-next-sibling (nodeptr1 nodeptr2) ; xml_node_ptr*xml_node_ptr->xml_node_ptr
  (declare (-gptr- "xmlNodePtr") nodeptr1)
  (declare (-gptr- "xmlNodePtr") nodeptr2)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlAddNextSibling($nodeptr1,$nodeptr2); #}
    nodeptr))

(defun xml-add-prev-sibling (nodeptr1 nodeptr2); xml_node_ptr*xml_node_ptr->xml_node_ptr
  (declare (-gptr- "xmlNodePtr") nodeptr1)
  (declare (-gptr- "xmlNodePtr") nodeptr2)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlAddPrevSibling($nodeptr1,$nodeptr2); #}
    nodeptr))


(defun xml-add-sibling (nodeptr1 nodeptr2) ; xml_node_ptr*xml_node_ptr->xml_node_ptr
  (declare (-gptr- "xmlNodePtr") nodeptr1)
  (declare (-gptr- "xmlNodePtr") nodeptr2)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlAddSibling($nodeptr1,$nodeptr2); #}
    nodeptr))


;  header """ 
;  std::string xml_encode_special_chars_helper(const xmlChar *input) {
;    xmlDocPtr doc = xmlNewDoc((const xmlChar *)"");
;    xmlChar *enc =  xmlEncodeSpecialChars(doc,input);
;    std::string ret = std::string((const char *)enc);
;    xmlFree(enc);
;    xmlFreeDoc(doc);
;    return ret;
;  }
;  """;
;
(defun xml-encode-special-chars (docptr s1); string->string
  (declare (-gptr- "xmlDocPtr") docptr)
  (declare (-str-) s1)
  (let ((s ""))
    (declare (-str-) s)
    #{ $s = (char *) xmlEncodeSpecialChars($docptr,(const xmlChar *)$s1); #}
    s))

(defun xml-replace-node (nodeptr1 nodeptr2) ; xml_node_ptr*xml_node_ptr->xml_node_ptr 
  (declare (-gptr- "xmlNodePtr") nodeptr1)
  (declare (-gptr- "xmlNodePtr") nodeptr2)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlReplaceNode($nodeptr1,$nodeptr2); #}
    nodeptr))

;  publish "replaces old node with new node and destroys old node"
;  proc xml_replace_node_p (old:xml_node_ptr,cur:xml_node_ptr) {
;    val o = xml_replace_node(old,cur);
;    if not isNull[xml_node_ptr](o) do xml_free_node(o); done
;  }
 
(defun xml-set-prop (nodeptr1 s1 s2) ; xml_node_ptr*xml_char_ptr*xml_char_ptr->xml_attr_ptr
  (declare (-gptr- "xmlNodePtr") nodeptr1)
  (declare (-str-) s1)
  (declare (-str-) s2)
  #{ xmlSetProp($nodeptr1,(xmlChar *)$s1,(xmlChar *)$s2); #}
  t)

(defun node-name (n)
  (declare (-gptr- "xmlNodePtr") n)
  (if (not (is-null n)) 
      (let ((s "")) (declare (-str-) s) #{ $s = (char *)$n->name; if($s == 0){$s="WTF";}#} s) 
      "")
)

(defun node-content (n)
  (declare (-gptr- "xmlNodePtr") n)
  (if (not (is-null n)) 
      (let ((s "")) (declare (-str-) s) #{ $s = (char *)$n->content; #} s) 
      "")
)

(defun node-children (n)
  (declare (-gptr- "xmlNodePtr") n)
  (if (not (is-null n)) 
      (let ((c (to-gptr ()))) (declare (-gptr- "xmlNodePtr") c) #{ $c = $n->children; #} c)      (to-gptr ()))
)

(defun node-next (n)
  (declare (-gptr- "xmlNodePtr") n)
  (if (not (is-null n)) 
      (let ((c (to-gptr ()))) (declare (-gptr- "xmlNodePtr") c) #{ $c = $n->next; #} c) 
      (to-gptr ()))
)
(defun node-prev (n)
  (declare (-gptr- "xmlNodePtr") n)
  (if (not (is-null n)) 
      (let ((c (to-gptr ()))) (declare (-gptr- "xmlNodePtr") c) #{ $c = $n->prev; #} c) 
      (to-gptr ()))
)

;  gen xml_set_prop (node:xml_node_ptr,name:string,value:string):xml_attr_ptr = {
;    return xml_set_prop(node,xml_char_ptr_of_char_ptr(cstr(name)),xml_char_ptr_of_char_ptr(cstr(value)));
;  }

(defun xml-get-prop (nodeptr1 s1) ; xml_node_ptr * xml_char_ptr -> xml_char_ptr 
  (declare (-gptr- "xmlNodePtr") nodeptr1)
  (declare (-str-) s1)
  (let ((s ""))
    (declare (-str-) s)
    #{ $s = (char *)xmlGetProp($nodeptr1,(xmlChar *)$s1); #}
    s))

proc xml_free_doc: xml_doc_ptr = "xmlFreeDoc($1);";

;/*Function: xmlCopyNode
;Do a copy of the node.
;node:	the node
;extended:	if 1 do a recursive copy (properties, namespaces and children when applicable) if 2 copy properties and namespaces (when applicable)
;Returns:	a new #xmlNodePtr, or NULL in case of error.
;*/
(defun  xml-copy-node (nodeptr1 i1) ; xml_node_ptr*int->xml_node_ptr
  (declare (-gptr- "xmlNodePtr") nodeptr1)
  (declare (-int-) i1)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlCopyNode($nodeptr1,$i1); #}
    nodeptr))

;/*
;Function: xmlCopyNodeList
;*/

(defun xml-copy-node-list (nodeptr1) ; xml_node_ptr->xml_node_ptr 
  (declare (-gptr- "xmlNodePtr") nodeptr1)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlCopyNodeList($nodeptr1) #}
    nodeptr))

 (defun xml-free-doc (doc) ; xml_doc_ptr  
   (declare (-gptr- "xmlDocPtr") doc)
   #{ xmlFreeDoc($doc); #}
   t
   )
#? *** DOM Interface to lowlevel XML2 functions
;; Provides classes for major XML2 object types and managed memory
;;
;; Example: {<code>
;; (with-namespace xml2-
;;  (let ((doc (new xml2-document))
;;       (txt "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' \
;;               'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'> \
;;             <html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'> \
;;               <head> </head> \
;;               <body> Hello World!! </body> \
;;             </html>"))
;;   (==> doc parseString txt)
;;   (print (==> doc toStr) )
;;   (==> doc -destructor)
;; )) </code>}
;;

#? * Wrapper class for xmlDocument
;; document contains the following lost
;; <xmldocptr> a reference to the xmlDocPtr 
(defclass document object
  ((-gptr- "xmlDocPtr") xmldocptr))

#? * (new document)
;; Createa a new document object. You will need to populate
;; the object by using <parseFile> , <parseString> , <parseHtmlString> , 
;; <parseHtmlFile> or <newDoc> methods.
(defmethod document document ()
  (setq :this:xmldocptr  (to-gptr ())))

#? (==> <document> newDoc <verson string>)
;; Creates a empty document with the XML version specefied in
;; the <version string> (usually 1.0).
;; This method would normally be what is used when
;; porgramatically creating documents
(demethod document newDoc (doc)
  (declare (-str-) doc)
  (let ((docptr (to-gptr ())))
    #{ $docptr = xmlNewDoc((const xmlChar *) $doc); #}
    (setq :this:xmldocptr docptr)
    t))

#? (==> <document> parseFile <file name>)
; Parses XML document contained in <file name>
(defmethod document parseFile (file)
  (declare (-str-) file)
  (let ((xdoc (to-gptr ())))
    (declare (-gptr-) xdoc)
    #{ $xdoc = xmlParseFile($file); #}
    (setq :this:xmldocptr xdoc)
    t))

#? (==> <document> parseString <xml string>)
; Parses XML document contained in <xml string>
(defmethod document parseString (s)
  (declare (-str-) s)
  (let ((xdoc (to-gptr ()))
	(l (length s)))
    (declare (-gptr-) xdoc)
    (declare (-int-) l)
    #{ $xdoc = xmlParseMemory($s,$l); #}
    (setq :this:xmldocptr xdoc)
    t
    ))

#? (==> <document> parseHTMLFile <HTML file>)
; Parses HTML document contained in the file <HTML file>
; Main difference is able to deal with non strict documents
(defmethod document parseHTMLFile (file enc)
  (declare (-str-) file)
  (declare (-str-) enc)
  (let ((xmldocptr (to-gptr ())))
    (declare (-gptr-) xmldocptr)
    #{ $xmldocptr = htmlParseFile($file,$enc); #}
    (setq :this:xmldocptr xmldocptr)
    t))

#? (==> <document> parseHTMLString <HTML string>)
; Parses HTML document contained in the string <HTML string>
; Main difference is able to deal with non strict documents
(defmethod document parseHTMLString (s)
  (declare (-str-) s)
  (let ((xmldocptr (to-gptr ())))
    (declare (-gptr-) xmldocptr)
    #{ $xmldocptr = htmlParseDoc((xmlChar *) $s,NULL); #}
    (setq :this:xmldocptr xmldocptr)
    t))

#? (==> <document> toStr)
;Dump an XML document in memory and return string representation of the document
(defmethod document toStr ()
  (let ((s "")
	(sz 0)
	(docptr :this:xmldocptr))
    (declare (-gptr- "xmlDocPtr") docptr) 
    (declare (-str-) s) (declare (-int-) sz)
    #{ xmlChar *t_tcmp = NULL; 
    xmlDocDumpMemory($docptr,(xmlChar **) & t_tcmp,& $sz);
    $s = (char *) malloc(sizeof(char)*$sz+4);
    strcpy($s,(char *)t_tcmp);
    xmlFree(t_tcmp);
    #}
    s))

#? (==> <document> freeDoc)
;; Frees memory handle of wrapped xml2 object.
;; This method would be used if the intent is
;; to reuse the object but on a new document
(demethod document freeDoc () ; xml_doc_ptr  
   (let ((doc :this:xmldocptr))
     (declare (-gptr- "xmlDocPtr") doc)
     (setq :this:xmldocptr (to-gptr ()))
     #{ xmlFreeDoc($doc); #}
     t
   ))
#? (== <document> getRootElement)
;; Returns root node objct 
(demethod document getRootElement ()
  (let ((docptr :this:xmldocptr)
	(nodeptr (to-gptr ())))
    (declare (-gptr- "xmlDocPtr") docptr)
    (declare (-gptr- "xmlNodePtr"))
    #{  $nodeptr = xmlDocGetRootElement($docptr); #}
    (new xml2-node nodeptr NODE_UNMANAGED)))

#? (== <document> setRootElement <node instance>)
;; Sets xmlNodePtr contained in <node instance>
;; as the root element of the <document>
(demethod document setRootElement (node-obj)
  (declare (-obj- (xml2-node)) node-obj)
  (let ((docptr :this:xmldocptr)
	(nodeptr :node-obj:xmlnodeptr))
    (declare (-gptr- "xmlDocPtr") docptr)
    (declare (-gptr- "xmlNodePtr") nodeptr)
    
    #{xmlDocSetRootElement($docptr,$nodeptr); #}
    ;(setq :node-obj:xmlnodeptr (to-gptr ()))
    (setq :node-obj:managed NODE_UNMANAGED)
    t))

#? (-destructor)
;; Performs memory dallocation
(defmethod document -destructor ()
  (print "document -destructor")
  (when (<> :this:xmldocptr (to-gptr ()))
    (==> this freeDoc))
  t)

#? * Wrapper class for xmlNode
;; Slots:
;; {<br>} <xmlnodeptr> - handle to xmlNodePtr 
;; {<br>} <managed> - values should be one of NODE_MANAGED if there is an explicit 
;; reference to the node or NODE_UNMANAGED if there is no persisten reference to the node
(defclass node object
  ((-gptr- "xmlNodePtr") xmlnodeptr)
  ((-int-) managed)
)

#? * (new node <nodeptr>)
;; Wraps xmlNode in node object
;; xmlNode references obtained from 
;; results returned from the low level
;; interface to xml2
(defmethod node node ( nodeptr managed )
  (declare (-gptr- "xmlNodePtr") nodeptr)
  (declare (-int-) managed)
  (setq :this:xmlnodeptr nodeptr)
  (setq :this:managed managed)
)

#? (==> <node> freeNode)
;; Dealocates xmlNode object contained in node object
;; and set xmlnodeptr slot to NULL
(defmethod node freeNode ()
  (let ((nodeptr :this:xmlnodeptr))
    (setq :this:xmlnodeptr (to-gptr ()))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ xmlFreeNode($nodeptr); #}
    )
  t)

#? (==> <node> freeNodeList)
;; Dealocates xmlNode object and child nodes contained in node object
;; and set xmlnodeptr slot to NULL
(demethod node freeNodeList ()
  (let ((nodeptr :this:xmlnodeptr))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ xmlFreeNodeList($nodeptr); #}
    t))

#? (==> <node> -destructor)
(defmethod node -destructor ()
  (print "node -destructor")
  (when (and (= managed  NODE_MANAGED) (<> :this:xmlnodeptr (to-gptr ())))
    (==> this freeNodeList))
  t)

;xml-new-ns (nodeptr s1 s2)
(defun newNodeNS (nsptr s)
  (declare (-gptr- "xmlNsPtr") nsptr)
  (declare (-str-) s)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlNewNode($nsptr,(const xmlChar *)($s)); #} 
    (new node nodeptr NODE_MANAGED)))

#? (newNode <name>)
;; Constructs new node with none name specified in <name>
(defun newNode (s)
  (declare (-str-) s)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ 
    $nodeptr = xmlNewNode(NULL,xmlCharStrdup("WTF")) #}
    (new node nodeptr NODE_MANAGED)))

#? (newTextNode <name>)
;; Constructs new text node with none name specified in <name>
(defun newTextNode (s)
  (declare (-str-) s)
  (let ((nodeptr (to-gptr ())))
    (declare (-gptr- "xmlNodePtr") nodeptr)
    #{ $nodeptr = xmlNewText((const xmlChar *)$s); #}
    (new node nodeptr NODE_MANAGED)))

#? (==> <node> addChild <child node>)
;; Adds nodeptr contained in <child node> as a child node of <node>
;; the xmlnodeptr slot of the <child node> is set to NULL
(defmethod node addChild (child-node)
  (declare (-obj- (node)) child-node)

  (let ((nodeptr (to-gptr ()))
	(nodeptr1 :this:xmlnodeptr)
	(nodeptr2 :child-node:xmlnodeptr))
    (declare (-gptr- "xmlNodePtr") nodeptr2)
    (declare (-gptr- "xmlNodePtr") nodeptr1)
    (declare (-gptr- "xmlNodePtr") nodeptr)
    (setq :child-node:xmlnodeptr (to-gptr ()))
    #{ $nodeptr = xmlAddChildList($nodeptr1,$nodeptr2); #}
    (new node nodeptr NODE_UNMANAGED)))

;  publish "parent:xml_node_ptr,namespace:xml_ns_ptr,name:string,content:string";

#? (==> <node> newChild <name> <content>)
;; Create new xmlNode with node name of <name>
;; containing content in <content>
(demethod node newChild ( s1 s2)
  (declare (-str-) s1)
  (declare (-str-) s2)
  (==> this newChildNS (to-gptr ()) s1 s2))

#? (==> <node> newChild <nsptr> <name> <content>)
;; Create new xmlNode with node name of <name>
;; containing content in <content> with
;; namespace in <nsptr>. If <nsptr> is null
;; namespace of parent is used
(demethod node newChildNS ( nsptr s1 s2)
  (declare (-gptr- "xmlNsPtr") nsptr)
  (declare (-str-) s1)
  (declare (-str-) s2)
  (let ((nodeptr (to-gptr ()))
	(nodeptr1 :this:xmlnodeptr))
    (declare (-gptr- "xmlNodePtr") nodeptr1)
    (declare (-gptr- "xmlNodePtr"))
    #{  $nodeptr = xmlNewChild($nodeptr1,$nsptr,(const xmlChar *)($s1),(const xmlChar *)($s2)); #}
    (new node nodeptr NODE_UNMANAGED)))

#? (==> <node> newTextChild <name> <content>)
;; Create new text xmlNode with node name of <name>
;; containing content in <content>
(demethod node newTextChild ( s1 s2)
  (declare (-str-) s1)
  (declare (-str-) s2)
  (==> this newTextChildNS (to-gptr ()) s1 s2))

#? (==> <node> newTextChildNS <nsptr> <name> <content>)
;; Create new xmlNode with node name of <name>
;; containing content in <content> with
;; namespace in <nsptr>. If <nsptr> is null
;; namespace of parent is used
(defmethod node newTextChildNS (nsptr s1 s2)
  (declare (-gptr- "xmlNsPtr") nsptr)
  (declare (-str-) s1)
  (declare (-str-) s2)
  (let ((nodeptr (to-gptr ()))
	(nodeptr1 :this:xmlnodeptr))
    (declare (-gptr- "xmlNodePtr") nodeptr1)
    (declare (-gptr- "xmlNodePtr"))
    #{  $nodeptr = xmlNewTextChild($nodeptr1,$nsptr,(const xmlChar *)($s1),(const xmlChar *)($s2)); #}
    (new node nodeptr NODE_UNMANAGED)))

(defmethod node name ()
  (node-name :this:xmlnodeptr))

(defmethod node content ()
  (node-content :this:xmlnodeptr))

)

(de headers ()
  (cpheader "#include <libxml2/libxml/parser.h>")
  (cpheader "#include <libxml2/libxml/HTMLparser.h>")
  (cpheader "#include <libxml2/libxml/tree.h>")
  (cpheader "#include <libxml2/libxml/uri.h>")
  t)

(dhc-make-with-libs () 
                    (list xml2-libxml2)
		    headers
		    xml2-is-null
		    xml2-xml-parse-file
		    xml2-xml-parse-string
		    xml2-html-parse-file
		    xml2-xml-parse-in-node-context
		    xml2-html-parse-string
		    xml2-xml-doc-dump
		    xml2-xml-free-node
		    xml2-xml-free-node-list
		    xml2-xml-doc-dump-memory 
		    xml2-xml-new-doc
		    xml2-xml-new-dtd
		    xml2-xml-create-int-subset
		    xml2-xml-new-html-dtd
		    xml2-xml-parse-local-dtd
		    xml2-xml-parse-external-dtd
		    xml2-xml-new-node
		    xml2-xml-new-node-ns
		    xml2-xml-new-ns
		    xml2-xml-new-text
		    xml2-xml-add-child
		    xml2-xml-new-child
		    xml2-xml-new-text-child
		    xml2-xml-doc-get-root-element
		    xml2-xml-doc-set-root-element
		    xml2-xml-new-cdata-block
		    xml2-xml-node-get-content
		    xml2-xml-node-set-content
		    xml2-xml-add-next-sibling 
		    xml2-xml-add-prev-sibling 
		    xml2-xml-add-sibling
		    xml2-xml-encode-special-chars
		    xml2-xml-replace-node
		    xml2-xml-get-prop
		    xml2-xml-set-prop
		    xml2-xml-copy-node
		    xml2-xml-copy-node-list
		    xml2-xml-free-doc
		    xml2-node-name
		    xml2-node-content
		    xml2-node-children
		    xml2-node-prev
		    xml2-node-next
		    (xml2-node xml2-node freeNode freeNodeList addChild
			       newChildNS newChild newTextChildNS newTextChild 
			       name content)
		    xml2-newNodeNS
		    xml2-newNode
		    xml2-newTextNode
		    (xml2-document xml2-document parseFile parseString 
				   parseHTMLString parseHTMLFile toStr
				   newDoc 
getRootElement 
setRootElement
				   freeDoc)
		   
)


