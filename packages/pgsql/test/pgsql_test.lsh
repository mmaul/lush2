(libload "pgsql")

;;val connection_str_unix = "host=/tmp/.s.PGSQL.5432 dbname=multiple_sa user=appl password=xpOSrffs12"; */

(with-namespace pgsql-

(defvar connection-str  "host=localhost port=5432 dbname=multiple_sa user=appl password=xpOSrffs12")

(defvar bad-connection-str  "host=localhost port=5432 dbname=bad_multiple_sa user=appl password=xpOSrffs12")

;; Not sure if this is working
(defun test-connectdb ()
  (let ((db (pgsql-connectdb connection-str))) 
    (assert (not (is-null db)))
    (finish db)
    "ok"))

(defun test-reset ()
  (let ((db (pgsql-connectdb connection-str))) 
    (assert (not (is-null db)))
    (reset db)
    ;;(finish db)
    "ok"))

(defun test-status ()
  (let ((db (pgsql-connectdb connection-str))) 
    (assert (not (is-null db)))
    (assert (= (status db) 0))
    (finish db))
  (let ((db (pgsql-connectdb bad-connection-str))) 
    (assert (not (is-null db))) ;; OK 
    (assert (= (status db) 1)) ;; CONNECTION_BAD
    (finish db))
    "ok")

(defun test-exec-select ()
  (let ((db (pgsql-connectdb connection-str))) 
    (assert (not (is-null db)))
    (assert (= (status db) (CONNECTION_OK)))
    (let ((result (exec db "SELECT * from contact")))
      (assert (not (is-null result)))
      (let ((rst (result-status result))) 
	(assert (= rst 2)) ;; TUPLES_OK
	(assert (= (exec-status-type rst) "PGRES_TUPLES_OK"))
	(let ((n  (nfields result))) 
	  (printf "nfields %d\n" n)
	  (printf "binary:%d\n"(binaryTuples result))
	  (for (i 0 (- n 1))
	       (let* ((nm (fname result i))
		     (no (fnumber result nm)))
		 (printf "[%d](%d:%d):%s [%d] (ftype:%d:%d)\n" 
			 (ftable result no) no (ftablecol result no) nm 
			 (fformat result no) (ftype result no) (fmod result no)
			 )))
	  (let ((r (ntuples result)))
	    (printf "ntuples %d\n" (ntuples result))
	    (for (i 0 (- r 1))
		 (for (j 0 (- n 1))
		      (printf "%s:%s |%d|%d|" (fname result j) (getvalue result i j) 
			      (getisnull result i j) (getlength result i j)))
	    (printf "\n")))
	  )
	
	(pgsql-clear result)	
	))
    (finish db)))

(defun test-exec-cmd ()
  (let ((db (pgsql-connectdb connection-str))) 
    (assert (not (is-null db)))
    (assert (= (status db) 0))
    (let ((result (exec db "update contact set bldg='123'")))
      (assert (not (is-null result)))
      (printf "%s %s\n" (cmdStatus result) (cmdTuples result))
      (pgsql-clear result)	
    (finish db))))

(defun test-escape ()
  (let ((db (pgsql-connectdb connection-str))) 
    (assert (not (is-null db)))
    (assert (= (status db) 0))
    (printf "TESTESCAPE\n")
    (let-filter (((a b c) (escapeStringConn db "A String';  select * from tables; --")))
      (assert (and (= a 37) (= b "A String'';  select * from tables; --") (= c 0))))
    (finish db)))


(defun test-all ()
  (test-connectdb)
  (test-reset)
  (test-status)
  (test-exec-select)
  (test-exec-cmd)
  (test-escape)
)
)

 