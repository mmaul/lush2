;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; io/readers package for LUSH Lisp Universal Shell
;;;   Copyright (C) 2012 Mike Maul
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(libload "util/str")

#? *** Readers
;; Classes for reading of input


(defvar lz
 (let ((lib (find-shared-or-static-library "libz")))
    (if (and lib (filep lib))
   lib
       (error "unable to find libz"))))
#? ** BufferReader
;; Base class for buffered readers implements buffer as IDX of ubyte

#? * Slots
#? ((-idx1- (-ubyte-)) buffer)
;; Content returned from <read>
#? ((-int-) sz)
;; Length of buffer
#? ((-int-) bsz)
;; Length of data in <buffer>

(defclass BufferReader object
 ((-idx1- (-ubyte-)) buffer)
 ((-int-) sz)
 ((-int-) bsz)
 )

#? * (new BufferReader <buffer size>)
;;
(defmethod BufferReader BufferReader (bufsz)
 (declare (-int-) bufsz)
 (setq sz bufsz)
 (setq bsz 0)
 (setq buffer (ubyte-array bufsz))

 ()))

(defmethod BufferReader -destructor ()
 ()
)

#? * (==> <BufferReader> read)
;; Dummy method, to be implemented by descendants
(defmethod BufferReader read ()
   bsz)

#? * (==> <BufferReader> to-string)
;; Returns string view of buffer's content
(defmethod BufferReader to-string ()
  (let ((ret ""))
    (declare (-str-) ret)
    #{ $ret = (char *)IDX_PTR($buffer,unsigned char); #}
    ret))

#? ** BufferFileReader BufferReader
;; Subclass of BufferReader for reading files

#? * Slots
#? ((-str-) filename)

(defclass BufferFileReader BufferReader
 ((-str-) filename)
 ((-gptr- "FILE *") fptr)
 )

#? * (new BufferFileReader <filename> <buffer size>)
;;
(defmethod BufferFileReader BufferFileReader (filenm bsize)
   (declare (-str-) filenm)
   (declare (-int-) bsize)
   (==> this BufferReader bsize)
   (setq filename filenm)
   #{ $fptr = fopen($filename,"r"); #}
   (when (null fptr) (error "Error opening file"))
   ())

(defmethod BufferFileReader -destructor ()
  #{ fclose($fptr); #}
  ())

#? * (==> read <cls>)
;; reads from file into buffer returning bytes read
;; Decompressed data can be accessed in <buffer> slot
;; if EOF bytes read is 0
(defmethod BufferFileReader read ()
 (let ((bszt 0))
    (declare (-int-) bszt)
    (array-clear buffer 0)
    #{ $bszt = fread(IDX_PTR($buffer,unsigned char),1,$sz,$fptr); #}
    (setq bsz bszt)))

#? * (==> to-string)
;; Inherited from BufferReader
;; Returns string view of buffer


#? ** GzReader BufferReader
;; Application of BufferReader to Gzip'd data
;; Example: {<pre>
;; (libload "gz_reader")
;; (defparameter bfr2 (new BufferFileReader "Makefile.1.gz" 1024))
;; (defparameter gzr (new GzReader bfr2))
;; (==> gzr read)
;; </pre>}

#? * Slots
#?  ((-int-) blen)
;; Length of buffer (5x size of source<BuffereddRreader> buffer)
#?  ((-int-) initst)
;; Result code of inflateInit2
#?  ((-int-) err)
;; Result code of inflate

(defclass GzReader BufferReader
  ((-obj- (BufferReader)) reader)
  ((-int-) blen)
  ((-int-) initst)
  ((-int-) err)
  ((-gptr- "z_stream *") strm))

#? * (new GzReader <Buffered Reader>)
; Decompresses gzip'd data supplied by <Buffered Reader>
(defmethod GzReader GzReader (rdr)
  (declare (-obj- (BufferReader)) rdr)
  (setq reader rdr)
  (setq sz (* :rdr:sz 15))
  (setq bsz 0)
  (setq buffer (ubyte-array sz))
  #{ $strm = (z_stream *)malloc(sizeof(z_stream));
     $strm->zalloc = Z_NULL;
     $strm->zfree = Z_NULL;
     $strm->opaque = Z_NULL;
     $strm->avail_in = 0;
     $strm->total_out = 0;
     $strm->next_in = Z_NULL;
     $initst = inflateInit2($strm, (16+MAX_WBITS));//inflateInit($strm);
   #}
   ()
 )

#? * (==> to-string)
;; Inherited from BufferReader
;; Returns string view of buffer

(defmethod GzReader -destructor ()
  #{ if($err == Z_STREAM_END) {
       inflateEnd($strm);
     }
     free($strm);
  #}
  ()
)

#? * (==> read <GzReader>)
;; Returns number decompressed or 0 one End of Stream
;; Decompressed data can be accessed in <buffer> slot
(defmethod GzReader read ()
  (let ((bin (==> reader read))
    (in_buf :reader:buffer)
    (wtf 0)
  )
  (declare (-idx1- (-ubyte-)) in_buf)
  (declare (-int-) sz wtf)
  ;(array-clear buffer 0)
  #{
      $strm->next_in  = IDX_PTR($in_buf,unsigned char);
      $strm->avail_in = (uInt)$bin;
      $strm->next_out = IDX_PTR($buffer,unsigned char);
      $strm->avail_out = (uInt)$sz;
      $err = inflate($strm,  Z_SYNC_FLUSH);
      $bsz = $strm->total_out;
      $blen = $sz - $strm->avail_out;
      $wtf = $strm->avail_out;
    #}
  (setq bsz blen)
    blen)
 )

(defclass StringReader BufferReader
  ((-bool-) eof)
)

#? * (new BufferReader <buffer size>)
;;
(defmethod StringReader StringReader (s)
  (declare (-str-) s)
  (setq buffer (string-to-idx1-ubyte s))
  (setq sz (length s))
  (setq bsz sz eof ())
  ())

(defmethod StringReader read ()
  (if eof (progn (setq bsz 0) 0) (progn (setq eof t) bsz)))

;; ------------------------------------
#? * (==> <BufferReader> to-string)
;; Returns string view of buffer's content
(defun idx1-ubyte-string-view (dx)
  (declare (-idx1- (-ubyte-)) dx)
  (let ((ret ""))
    (declare (-str-) ret)
    #{ $ret = (char *)IDX_PTR($dx,unsigned char); #}
    ret))


(let ((dhc-make-lushflags (concat dhc-make-lushflags " -fpermissive -I.")))      
(dhc-make-with-c++ "reader" (list  lz)
#{
 #include "zlib.h"  
 #include "zconf.h"  
#}
 (BufferReader BufferReader -destructor read to-string)
 (BufferFileReader BufferFileReader -destructor read)
 (GzReader GzReader -destructor read)
 idx1-ubyte-string-view
 (StringReader StringReader)
))
