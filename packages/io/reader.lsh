;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; io/readers package for LUSH Lisp Universal Shell
;;;   Copyright (C) 2012 Mike Maul
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(libload "util/str")

#? *** Readers
;; Classes for reading of input


(defvar lz
 (let ((lib (find-shared-or-static-library "libz")))
    (if (and lib (filep lib))
   lib
       (error "unable to find libz"))))
;--------------------------------------------------
(defclass BufferReader object
 ((-gptr- "char *") buffer)
 ((-int-) bsize)
 ((-int-) blen)
 ((-int-) err)
 )

;#? * (new BufferReader <buffer size>)
;;
(defmethod BufferReader BufferReader (bufsz)
 (declare (-int-) bufsz)
 (setq bsize bufsz)
 (setq blen 0)
 #{ $buffer = (char *)malloc(sizeof(char)*$bsize+1); #}
 ()))

(defmethod BufferReader -destructor ()
  #{ free($buffer); #} 
()
)

;#? * (==> <BufferReader> read)
;;; Dummy method, to be implemented by descendants
(defmethod BufferReader read ()
   blen)

;#? * (==> <BufferReader> to-string)
;;; Returns string view of buffer's content
(defmethod BufferReader to-string ()
  (let ((ret ""))
    (declare (-str-) ret)
    #{ 
    at *p = make_string_of_length($blen);
    $ret = (unsigned char *)String(p);
    for (int i=0; i<$blen; i++)
    $ret[i] = (unsigned char)$buffer[i];
    #}
    ret))

(defmethod BufferReader buffer-array ()
  (let* ((ary (ubyte-array 0))
	 (srg (idx-storage ary)))
   (declare (-srg- (-ubyte-)) srg)
   ;(declare (-gptr- "char *") buffer)
    ;(declare (-int-) bsize)
  #{
   $srg->size = $bsize;
   $srg->kind = STS_FOREIGN;//STS_MMAP;
   $srg->isreadonly = true;
   $srg->data = $buffer;
   $ary->offset = 0;
   $ary->dim[0] = $bsize;
  #}
  ary
  ))


#? ** BufferFileReader BufferReader
;; Subclass of BufferReader for reading files

#? * Slots
#? ((-str-) filename)

(defclass BufferFileReader BufferReader
 ((-str-) filename)
 ((-gptr- "FILE *") fptr)
 )

#? * (new BufferFileReader <filename> <buffer size>)
;;
(defmethod BufferFileReader BufferFileReader (filenm bsize)
   (declare (-str-) filenm)
   (declare (-int-) bsize)
   (==> this BufferReader bsize)
   (setq filename filenm)
   #{ $fptr = fopen($filename,"r"); #}
   (when (null fptr) (error "Error opening file"))
   ())

(defmethod BufferFileReader -destructor ()
  #{ fclose($fptr); #}
  ())

#? * (==> read <cls>)
;; reads from file into buffer returning bytes read
;; Decompressed data can be accessed in <buffer> slot
;; if EOF bytes read is 0
(defmethod BufferFileReader read ()
  #{ $blen = fread($buffer,1,$bsize,$fptr); #}
  blen)

#? * (==> to-string)
;; Inherited from BufferReader
;; Returns string view of buffer

#? ** GzReader BufferReader
;; Application of BufferReader to Gzip'd data
;; Example: {<pre>
;; (libload "gz_reader")
;; (defparameter bfr2 (new BufferFileReader "Makefile.1.gz" 1024))
;; (defparameter gzr (new GzReader bfr2))
;; (==> gzr read)
;; </pre>}

#? * Slots
#?  ((-int-) blen)
;; Length of buffer (5x size of source<BuffereddRreader> buffer)
#?  ((-int-) initst)
;; Result code of inflateInit2
#?  ((-int-) err)
;; Result code of inflate

(defclass GzReader BufferReader
  ((-obj- (BufferReader)) reader)
  ((-int-) initst)
  ((-int-) bin)
  ((-int-) avail_out)
  ((-int-) avail_in)
  ((-int-) stream_end)
  ((-gptr- "z_stream *") strm))

#? * (new GzReader <Buffered Reader>)
; Decompresses gzip'd data supplied by <Buffered Reader>
(defmethod GzReader GzReader (rdr)
  (declare (-obj- (BufferReader)) rdr)
  (setq reader rdr)
  (setq bsize (* :rdr:bsize 5))
  (==> this BufferReader bsize)
  (setq blen 0 bin 0 avail_out bsize avail_in 0 stream_end 0)
  ;(setq buffer (ubyte-array sz))
  #{ 
     $strm = (z_stream *)malloc(sizeof(z_stream));
     $strm->zalloc = Z_NULL;
     $strm->zfree = Z_NULL;
     $strm->opaque = Z_NULL;
     $strm->avail_in = 0;
     $strm->total_out = 0;
     $strm->next_in = Z_NULL;
     $initst = inflateInit2($strm, (16+MAX_WBITS));//inflateInit($strm);
   #}
   ()
 )

#? * (==> to-string)
;; Inherited from BufferReader
;; Returns string view of buffer

(defmethod GzReader -destructor ()
  #{ if($err == Z_STREAM_END) {
       inflateEnd($strm);
     }
     free($strm);
//   free($buffer);
  #}
  ()
)

#? * (==> read <GzReader>)
;; Returns number decompressed or 0 one End of Stream
;; Decompressed data can be accessed in <buffer> slot
(defmethod GzReader read ()
  (let ((in_buf :reader:buffer)
	      (wtf 0)
	      )
    (declare (-gptr- "char *") in_buf)
    (declare (-int-) wtf)
    (if (= stream_end 1) 
	0 
	(progn 
          (when (<= avail_in 0) 
	    (setq avail_in (==> reader read))
	    #{ $strm->next_in  = $in_buf;
	       $strm->avail_in = (uInt)$avail_in; #}
	       
	    0)
	  (when (> avail_in 0)
	
	    #{
            //int badend=0;
	    //memset($buffer,0,$bsize);
	    $strm->next_out = $buffer;
	    $strm->avail_out = (uInt)$bsize;
	    $err = inflate($strm,  Z_NO_FLUSH);
	    switch ($err) {
	    case Z_NEED_DICT:
	      $err = Z_DATA_ERROR;     /* and fall through */
            case Z_DATA_ERROR:
            case Z_MEM_ERROR:
                (void)inflateEnd($strm);
                //badend=1;
                break;
            }
            $blen = $bsize - $strm->avail_out;
            ////$blen = $strm->total_out;
            $avail_out = $strm->avail_out;
	    $avail_in = $strm->avail_in;
            //printf("(blen:%d avail_out:%d bsize:%d avail_in:%d err:%d)\n",
            //     $blen,$avail_out,$bsize,$avail_in,$err);
            $stream_end = $err == Z_STREAM_END;
            #}
            (- blen 0)
            )
	  (- blen 0)
         )
      )
    )
  )


(defclass StringReader BufferReader
  ((-bool-) eof)
)

#? * (new BufferReader <buffer size>)
;;
;(defmethod StringReader StringReader (s)
;  (declare (-str-) s)
;  (setq buffer_s (string-to-idx1-ubyte s))
;  (setq sz (length s))
;  (setq bsz sz eof ())
;  ())

;(defmethod StringReader read ()
;  (if eof (progn (setq bsz 0) 0) (progn (setq eof t) bsz)))


(let ((dhc-make-lushflags (concat dhc-make-lushflags " -fpermissive -I.")))      
(dhc-make-with-c++ "reader2" (list  lz)
#{
 #include "zlib.h"  
 #include "zconf.h"  
#}  
 (BufferReader BufferReader -destructor read to-string buffer-array)
 (BufferFileReader BufferFileReader -destructor read )
 (GzReader GzReader -destructor read)
; (StringReader StringReader)
))
