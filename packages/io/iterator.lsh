#? ** Reader Iterators
;; Iterators for <Reader> objects 
;; For details of iterator functions {<see> Generic Iterator Functions }
;; Reader Iterator Example: {<pre>
;; (let* ((buffer-reader (new BufferFileReader "Makefile.gz" 1024))
;;       (gz-reader (new GzReader buffer-reader))
;;        (line-reader (new LineReaderIterator gz-reader))
;;        (lineno 0))
;;  (do ((line line-reader))
;;      (printf "%d:%s\n" (incr lineno) 
;;                       (idx1-ubyte-to-string line))))
;; </pre>}

(libload "io/reader")
  
#? * ReaderIterator
;; Iterator for <Reader> objects breaking at a given <separtor> specified as
;; a ubyte value
(defclass ReaderIterator iterator
  ((-obj- (BufferReader)) reader)
  ((-int-) sep)  
  ((-int-) i l)
  ((-idx1- (-ubyte-)) next-item) )

#? (new ReaderIterator <reader> <separator>)
;; Constructor for <ReaderIterator> where <reader> is an instance of 
;; the <Reader> class and <separator> is a ubyte value.
(defmethod ReaderIterator ReaderIterator (rdr separator)
  (declare (-obj- (BufferReader)) rdr)
  (declare (-ubyte-) separator)
  (==> this iterator)
  (==> rdr read)
  (setq i 0 l 0 
	reader rdr
	sep separator
	next-item-valid ())
  ())


(defmethod ReaderIterator -make-next* (recur)
  (declare (-method- (ReaderIterator) ((-bool-)) (-idx1- (-ubyte-))) -make-next*)
  (declare (-bool-) recur)
  (let ((done ())
	(ret (ubyte-array 0)))
    (declare (-bool-) done)
    (declare (-idx1- (-ubyte-)) ret)
    (when (> :reader:bsz 0)
    (while (and (< i (- :reader:bsz 1))  (not done))
	 (when (= (:reader:buffer i) sep)
	       (setq ret  (idx-trim :reader:buffer 0 l  (- i l))
		     l (+ i 1)
		     i (+ 1 i)
		     done t)
	       )
	 (setq i (+ i 1))) 
    (when (not done)  
	(setq ret (let* ((e (- i l))
			 (m (if (> e 1) 1 0))
			 (hd (copy-array (idx-trim :reader:buffer 0 l (+ e m))))
			 (retv (if (> (==> reader read) 0)
				  (progn 
				   (setq i 0 l 0) 
				   (let*
				       ((tl (==> this -make-next* t))
					(dat (array-extend hd 0 (length tl)))
					(rest (idx-trim dat 0 (length hd))))
				     (declare (-idx1- (-ubyte-)) tl dat rest)
				     (declare (-int-) i)
				     (idx-bloop ((tz tl)
						 (vz rest))
						(vz (tz))
						)
				     dat
				     )
				   )
				  hd)))
		    (declare (-int-) e m)
		    (declare (-idx1- (-ubyte-)) hd retv)
		    (setq done (> (length retv) 0))
		    retv))
	)
    )
    (when (not recur)
	  (when done (setq next-item ret))
	  (setq next-item-valid done))
    ret
    )
  )
 
(defmethod ReaderIterator -make-next ()
  (declare (-method- (ReaderIterator) ((-bool-)) (-idx1- (-ubyte-))) -make-next*)
  
  (==> this -make-next* ())
  ())

#? * LineReaderIterator
;; Iterator for <Reader> objects breaking at newlines (0aX)
(defclass LineReaderIterator ReaderIterator )

#? (new LineReaderIterator <reader>)
;; Constructor for <LineReaderIterator> where reader is an instance of 
;; the <Reader> class
(defmethod LineReaderIterator LineReaderIterator (rdr)
  (declare (-obj- (BufferReader)) rdr)
  (==> this ReaderIterator rdr 10))

(dhc-make-class ()
		ReaderIterator
		LineReaderIterator
		)
