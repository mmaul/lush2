#? ** Reader Iterators
;; Iterators for <Reader> objects 
;; For details of iterator functions {<see> Generic Iterator Functions }
;; Reader Iterator Example: {<pre>
;; (let* ((buffer-reader (new BufferFileReader "Makefile.gz" 1024))
;;       (gz-reader (new GzReader buffer-reader))
;;        (line-reader (new LineReaderIterator gz-reader))
;;        (lineno 0))
;;  (do ((line line-reader))
;;      (printf "%d:%s\n" (incr lineno) 
;;                       (idx1-ubyte-to-string line))))
;; </pre>}

(libload "io/reader")
(libload "util/array")  

#? * ReaderIterator
;; Iterator for <Reader> objects breaking at a given <separtor> specified as
;; a ubyte value
;; Example: {<code>
;; (defparameter bfr2 (new BufferFileReader1 "dnsreqs13.log" 128))
;; (defparameter li (new ReaderIterator bfr2 10))
;; (idx1-ubyte-to-string (next li))
;; </code>}
(defclass ReaderIterator iterator
  ((-obj- (BufferReader)) reader)
    ((-int-) sep)  
  ((-int-) i l n )
  ((-idx1- (-ubyte-)) next-item) )

(defmethod ReaderIterator -buffer-storage (srg)
  (declare (-srg- (-ubyte-)) srg)
  (let ((buffer :reader:buffer)
	(bsize :reader:bsize))
    (declare (-gptr- "char *") buffer)
    (declare (-int-) bsize)
  #{
  $srg->size = $bsize;
  $srg->kind = STS_FOREIGN;//STS_MMAP;
  $srg->isreadonly = true;
  $srg->data = $buffer;
  #}
  ()
  ))


#? (new ReaderIterator <reader> <separator>)
;; Constructor for <ReaderIterator> where <reader> is an instance of 
;; the <Reader> class and <separator> is a ubyte value.
(defmethod ReaderIterator ReaderIterator (rdr separator)
  (declare (-obj- (BufferReader)) rdr)
  (declare (-ubyte-) separator)
  (==> this iterator)
  (setq i 0 l 0 
	reader rdr
	sep separator
	next-item-valid () )
  (setq next-item (ubyte-array 0))

  (setq n 0)
  (==> reader read)
  ;(==> this -buffer-storage (idx-storage next-item))
  ())

(defmethod ReaderIterator -make-next ()
  (declare (-method- (ReaderIterator) ((-srg- (-ubyte-))) (-bool-)) -buffer-storage)
  (let* ((sepp ()) ; seperator predicate
	(blen :reader:blen) ; buffer length
	(buffer :reader:buffer)
	(item (ubyte-array 0))
	(srg (idx-storage item))
	(cnt 0))
    (declare (-bool-) sepp)
    (declare (-gptr- "char *") buffer)
    (setq next-item (ubyte-array 0))
    (==> this -buffer-storage srg)
    (while (and (= :reader:err 0) (not next-item-valid)) 
	   (when (>= n blen)
	     (setq n 0 ; n points to current buffer pos
		   blen (==> reader read))
	     (==> this -buffer-storage srg)
		   
	     )
	   (while (and (not sepp) (> blen n))
	     #{
	     $item->offset = $n;
	     while($n<$blen && !$sepp){ 
	     $sepp = ($buffer[$n++] == $sep);
	     }
	     $item->dim[0] = $n - $item->offset - (($sepp) ? 1 : 0);
	     #}
	     
	     )
	   (cond
	     ( sepp (progn
		      (setq next-item (idx1-ubyte-concat next-item item))
		      (setq next-item-valid t))
		    )
	     ((>= blen n) (progn
			   (setq next-item (idx1-ubyte-concat next-item item)))
	      )
	     (t (setq :reader:err 100))
	     )
	   )
    )
()
)

#? * LineReaderIterator
;; Iterator for <Reader> objects breaking at newlines (0aX)
(defclass LineReaderIterator ReaderIterator )

#? (new LineReaderIterator <reader>)
;; Constructor for <LineReaderIterator> where reader is an instance of 
;; the <Reader> class
(defmethod LineReaderIterator LineReaderIterator (rdr)
  (declare (-obj- (BufferReader)) rdr)
  (==> this ReaderIterator rdr 10)
  ())

(dhc-make-class ()
		ReaderIterator
		LineReaderIterator
		)
