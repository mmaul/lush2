#? ** Reader Iterators
;; Iterators for <Reader> objects 
;; For details of iterator functions {<see> Generic Iterator Functions }
;; Reader Iterator Example: {<pre>
;; (let* ((buffer-reader (new BufferFileReader "Makefile.gz" 1024))
;;       (gz-reader (new GzReader buffer-reader))
;;        (line-reader (new LineReaderIterator gz-reader))
;;        (lineno 0))
;;  (do ((line line-reader))
;;      (printf "%d:%s\n" (incr lineno) 
;;                       (idx1-ubyte-to-string line))))
;; </pre>}

(libload "io/reader")
(libload "util/array")  

#? * ReaderIterator
;; Iterator for <Reader> objects breaking at a given <separtor> specified as
;; a ubyte value
;; Example: {<code>
;; (defparameter bfr2 (new BufferFileReader1 "dnsreqs13.log" 128))
;; (defparameter li (new ReaderIterator bfr2 10))
;; (idx1-ubyte-to-string (next li))
;; </code>}
(defclass ReaderIterator iterator
  ((-obj- (BufferReader)) reader)
    ((-int-) sep)  
  ((-int-) i l n )
  ((-idx1- (-ubyte-)) next-item) )

(defmethod ReaderIterator -buffer-storage (srg)
  (declare (-srg- (-ubyte-)) srg)
  (let ((buffer :reader:buffer)
	(bsize :reader:bsize))
    (declare (-gptr- "char *") buffer)
    (declare (-int-) bsize)
  #{
  $srg->size = $bsize;
  $srg->kind = STS_FOREIGN;//STS_MMAP;
  $srg->isreadonly = true;
  $srg->data = $buffer;
  #}
  ()
  ))


#? (new ReaderIterator <reader> <separator>)
;; Constructor for <ReaderIterator> where <reader> is an instance of 
;; the <Reader> class and <separator> is a ubyte value.
(defmethod ReaderIterator ReaderIterator (rdr separator)
  (declare (-obj- (BufferReader)) rdr)
  (declare (-ubyte-) separator)
  (==> this iterator)
  (setq i 0 l 0 
	reader rdr
	sep separator
	next-item-valid () )
  (setq next-item (ubyte-array 0))

  (setq n 0)
  (==> reader read)
  ;(==> this -buffer-storage (idx-storage next-item))
  ())


 (defmethod ReaderIterator -make-next ()
   (declare (-method- (ReaderIterator) ((-srg- (-ubyte-))) (-bool-)) -buffer-storage)
   (let* ((item (ubyte-array 0)) 
	 (srg (idx-storage item))
	 (valid ())
	 (base :reader:buffer)
	 (np n)
	 (sepp ())
	 )
     (declare (-bool-) valid sepp)
     (declare (-gptr- "char *") base)
     (declare (-int-) np)
     (setq next-item (ubyte-array 0))
     (==> this -buffer-storage srg)
     (when (>= n (- :reader:blen 0)) 
	    ;(if (= (length next-item) 0)
			 ;(progn 
				(==> reader read)
				(setq n 0 np 0)
				#{ $item->offset = 0; #}
				;(==> this -buffer-storage (idx-storage item))
				(setq valid t)
				;)
			 ;(progn (print "X")
				;(setq next-item next-item))(setq valid t))
	    )
     (while (and (not sepp) (> :reader:blen 0) (< n :reader:blen))
	    (when (to-bool #{ ($item->offset)<($srg->size) #})
	      #{ 
              $item->offset += $n;
              size_t n = 0;
              size_t nmax = $item->offset < ($srg->size - 0) ? 
                            $srg->size - $item->offset : 0;
              char *c = $base + $item->offset;
              while (n<nmax && c[n]!=$sep){n++;};
              $sepp = c[n]==$sep;
              $n = (int)(n + 1);
              $item->dim[0] = n;
              $valid = (nmax>0);
              #} )
	    (when (or (not sepp) )
		  #{ $item->offset = $np; #}
		  (setq next-item (if (= (length next-item) 0)
				      (copy-array item)
				      (idx1-ubyte-concat next-item item)))
		    
		  (setq n 0 np 0)
		  #{ $item->offset = 0; #}
		  (==> reader read)
		  ;(==> this -buffer-storage (idx-storage item))
		  (setq valid ())
		  )
	    )
     
     (setq next-item (if (= (length next-item) 0)
			 (copy-array item)
			 (idx1-ubyte-concat next-item item)))
     (setq n (+ np n))
     (setq next-item-valid (and valid (> :reader:blen 0) (> n 0)))
     )
  ()
  )
 
#? * LineReaderIterator
;; Iterator for <Reader> objects breaking at newlines (0aX)
(defclass LineReaderIterator ReaderIterator )

#? (new LineReaderIterator <reader>)
;; Constructor for <LineReaderIterator> where reader is an instance of 
;; the <Reader> class
(defmethod LineReaderIterator LineReaderIterator (rdr)
  (declare (-obj- (BufferReader)) rdr)
  (==> this ReaderIterator rdr 10)
  ())

(dhc-make-class ()
		ReaderIterator
		LineReaderIterator
		)
