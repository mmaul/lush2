#? *** Base64 Codec
(defnamespace base64- '())

(in-namespace base64-
(defvar b64_chars "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")

#? (encode <inp>)
;; Returns base 64 encoding of supplied string <inp>
;; Example: {<code>
;; (encode "The quick brown fox jumps over the lazy dog.")
;; = "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4="
;; </code>}
(defun encode (in)
  (let* ((iOff 0)
	 (iLen (length in))
	 (oDataLen  (int (/ (+ (* iLen 4) 2) 3))) ;       // output length without padding
	 (oLen  (int (* (/ (+ iLen 2) 3) 4))) ;         // output length including padding
	 (out "") ;//make_string(size oLen,char(0));
	 (ip iOff) ;
	 (iEnd  (+ iOff iLen));
	 (op 0)) ;
    (while (< ip iEnd) 
      (let* ((i0 (bitand (in ip)  0xff)) 
	     (nil0 (incr ip))
	     (i1 (if (< ip iEnd) 
		     (bitand (in ip) 0xff) 
		     0)) 
	     (nil1 (when (< ip iEnd) (incr ip))) 
	     (i2 (if (< ip iEnd)
		     (bitand (in ip) 0xff)
		     0)) 
	     (nil2 (when (< ip iEnd) (incr ip)))
	     (o0 (bitshr i0 2)) ;
	     (o1 (bitor (bitshl (bitand i0 3) 4) (bitshr i1 4)));
	     (o2 (bitor (bitshl (bitand i1 0xf) 2) (bitshr i2 6)));
	     (o3 (bitand i2 0x3F))) ;
	(setq out (str-cat out (chr (b64_chars o0))))  
	(incr op) 
	(setq out (str-cat out (chr (b64_chars o1)))) 
	(incr op)
	(setq out (str-cat out (if (< op oDataLen)
				   (chr (b64_chars o2))
				   "=")));
	(incr op) ;
	(setq out (str-cat out (if (< op oDataLen) 
				   (chr (b64_chars o3))
				   "=")))
	(incr op))); 
    out))

#? (decode <encoded-string>)
;;  Decodes supplied base 64 encoded string 
;;   Example: {<code>  
;; (decode "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=")
;; = "The quick brown fox jumps over the lazy dog."
;; </code>}
(defun decode (enc_str)
  (let ((in_len (length enc_str))
	(i 0);
	(j 0);
	(in_ 0);
	(char_array_4 (int-array 4))
	(char_array_3 (int-array 3))
	(ret ""))
    (while (and (> in_len 0)  (<> (enc_str in_)  ("=" 0))) 
      (decr in_len)
      (char_array_4 i (enc_str in_))
      (incr i) (incr in_)
      (when (= i 4) 
	(for (ip 0 3)
	     (char_array_4 ip (let ((c  (str-find (chr (char_array_4 ip)) b64_chars)))
				c)))
	(char_array_3 0 (bitand (bitor (bitshl (char_array_4 0) 2)  
				       (bitshr (bitand (char_array_4 1)  0x30) 4)) 0xff));
	(char_array_3 1 (bitor (bitshl (bitand (char_array_4 1) 0xf) 4)  (bitshr (bitand (char_array_4 2) 0x3c)  2)));
	(char_array_3 2 (bitor (bitshl (bitand (char_array_4 2) 0x3) 6)  (char_array_4 3)));
	(for (l 0 2)
	     (setq ret (str-cat ret (chr (char_array_3 l)))));
	(setq i 0)))
    (when (> i 0) 
	(char_array_4 i (char_array_3 1));
	(for (m i 2)
	     (char_array_4 i 0));
	(for (k  0 2)
	     (char_array_4 k (let ((c (str-find (chr (char_array_4 k)) b64_chars)))
			       c)))
        (char_array_3 0 (bitor (bitshl (char_array_4 0) 2)  
			       (bitshr (bitand (char_array_4 1) 0x30) 4)));
        (char_array_3 1 (bitor (bitshl (bitand (char_array_4 1) 0xf) 4) (bitshr (bitand (char_array_4 2) 0x3c) 2)));
        (char_array_3 2 (bitor (bitshl (bitand (char_array_4 2)  0x3) 6) (char_array_4 3)))
	(for (nn 0   (- i 2)) 
	     (setq ret (str-cat ret (chr (char_array_3 nn)))))
	)
    ret)
    )

#? (wrap <string> <lwidth>)
;; wraps <string> after <lwidth> chars, no newline on last line
(defun wrap (b64_str lwidth)
      (declare (-str-) b64_str)
      (declare (-int-) lwidth)
      (let* ((ret "");
	    (n (length b64_str));
	    (whole (int (/ n lwidth)))
	    (rmd (mod n lwidth)));
	;;reserve (&ret, n+whole+1u);
	(for (i 0 (- whole 2))
	     (setq ret (str-cat ret (substring b64_str (* i lwidth)  (* (+ i  1) lwidth)) "\n")))
	(setq ret (str-cat ret (substring b64_str (* (- whole 1) lwidth)  (* whole lwidth))));
	(when (> rmd 0) 
	  (setq ret (str-cat ret "\n"  (substring b64_str (* whole lwidth)  (+ (* whole lwidth))))))
	ret;
	))
)