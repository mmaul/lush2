(defmacro defnmp-accessor/1 (cls fn ctype)
  `(defmethod ,cls ,fn (z)
  (declare (-double-) z)
  (let ((r 0)
	(s :this:dist))
    (declare (-double-) r)
    (declare (-gptr- ,ctype) s)
    (cinline ,(concat " (%s) = " (nameof fn)  "(*(%s),(%s));") r s z)
    r))
)
(defmacro defnmp-accessor/0 (cls fn ctype)
  `(defmethod ,cls ,fn ()
     (let ((r 0)
	   (s :this:dist)
	   )
       (declare (-double-) r)
       (declare (-gptr- ,ctype) s)
        (cinline ,(concat " (%s) = " (nameof fn) "(*(%s));") r s)
       r))
)

(defmacro defnmp-accessor-complement/1 (cls fn ctype)
  `(defmethod ,cls  ,(symbol-concat fn '-complement) (z)
  (declare (-double-) z)
  (let ((r 0)
	(s :this:dist))
    (declare (-double-) r)
    (declare (-gptr- ,ctype) s)
    (cinline ,(concat " (%s) = " (nameof fn)  "(complement(*(%s),(%s)));") r s z)
    r))
)

(defmacro defnmp-pair-accessor/0 (cls fn ctype)
  `(defmethod ,cls ,fn ()
     (let ((r1 0) (r2 0)
	   (s :this:dist)
	   (pp (to-gptr ()))
	   )
       (declare (-double-) r1 r2)
       (declare (-gptr- ,ctype) s)
       (declare (-gptr- "std::pair <double,double> *") pp)
       (cinline "(%s) = (std::pair<double,double> *)malloc(sizeof(std::pair<double,double>));" pp)
       (cinline ,(concat " *(%s) = " (nameof fn) "(*(%s));") pp s)
       (cinline " (%s) = (%s)->first;" r1 pp)
       (cinline " (%s) = (%s)->second;" r2 pp)
       (cinline "free((%s));" pp)
       (list r1 r2)))
)