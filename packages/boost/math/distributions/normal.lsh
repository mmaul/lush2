(libload "boost/math/distributions/dist_util")
(defvar boost-math-cflags ())
                         
#? * Normal
;; Normal Distribution
;; {<pre>
;; Slots: mean:-double-  
;;           sd:-double-
;;           dist:-gptr- normal* 
;; </pre>}
(defclass Normal object
  ((-double-) mean  sd )
  ((-gptr- "normal *") dist))

#? *(new Normal <mean> <sd>)
(defmethod Normal Normal (m s)
  (declare (-double-) m s)
  (setq mean m sd s)
  (setq dist (let ((nptr (to-gptr ()))) (declare (-gptr- "normal *") nptr) #{$nptr = new normal($mean,$sd);#})))

(defmethod Normal -destructor ()
  (let ((nptr :this:dist)) (declare (-gptr- "normal *") nptr)
  (print "Freeing dist")
  #{ free($nptr); #}
  ) () )

; common distribution methods
(defnmp-accessor/1 Normal quantile "normal *")
(defnmp-accessor/1 Normal cdf "normal *")
(defnmp-accessor/1 Normal pdf "normal *")
(defnmp-accessor-complement/1 Normal cdf "normal *")
(defnmp-accessor/1 Normal chf "normal *")
(defnmp-accessor/1 Normal hazard "normal *")
(defnmp-accessor/0 Normal kurtosis "normal *")
(defnmp-accessor/0 Normal kurtosis_excess "normal *")
(defnmp-accessor/0 Normal mean "normal *")
(defnmp-accessor/0 Normal median "normal *")
(defnmp-accessor/0 Normal mode "normal *")
(defnmp-accessor-complement/1 Normal quantile "normal *")
(defnmp-accessor/0 Normal skewness "normal *")
(defnmp-accessor/0 Normal standard_deviation "normal *")
(defnmp-accessor/0 Normal variance "normal *")
;    support. return pair
;    range. returns pair

(when (not boost-math-cflags)
  (setq boost-math-cflags " -fpermissive"))

(let ((dhc-make-lushflags (concat dhc-make-lushflags boost-math-cflags)))
  (dhc-make-with-c++ "boost_math_dist" '() 
#{ 
           #include <boost/math/distributions/normal.hpp> // for normal_distribution
           using boost::math::normal; // typedef provides default type is double.
#}
		     (Normal Normal -destructor pdf cdf quantile 
			     skewness mean mode median standard_deviation
			     hazard kurtosis kurtosis_excess chf variance
			     cdf-complement quantile-complement
			     )

		     )
  
)

