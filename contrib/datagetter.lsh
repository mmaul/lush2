;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Bronze
;;; Copyright (C) Scott Locklin, Lugos LLC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(libload "codec/csv/csv")
#? *** Financial data getter 
;; originally designed for yahoo data only, to be extended as a general
;; set of tools for obtaining financial data online. Depends on wget 
;;
;; yahoo seems to have several ways to get data
;; one of them is documented at http://www.gummy-stuff.org/Yahoo-data.htm

(defparameter datadir ".")
(defconstant yahoo-finance-table-fmt (list identity str-val str-val str-val 
					   str-val str-val str-val str-val
					   ))
(defparameter *spd*         (* 24 3600))

(de read-data (ticker)
  (read-lines (concat datadir "/" ticker ".CSV")))

#? (yahoo-get-price <ticker>)
;; <ticker> is a string representing the stock ticker
(de yahoo-get-price (ticker)
  (nth 1 (yahoo-get-quote ticker)))


(de yahoo-get-quote (ticker)
  (yahoo-get-now ticker)
  (csv-decode (car (read-data ticker)) "," t
	      (list identity str-val identity identity str-val str-val 
		    str-val str-val str-val)))



#? (yahoo-get-dividend <ticker> <start> <finish>)
;; gets the dividends
(de yahoo-get-dividend (ticker start finish)
  (sys (build-dividend-query ticker start finish))
  (let* ((rawdata (read-lines (concat ticker ".CSV")))
	 (lenraw (length rawdata))
	 (cols (comma-splitter (car rawdata)))
	 (outhash (htable)))
    (outhash "Date" (mapfor (i lenraw 2 -1) (date-getter (nth rawdata i))))
    (outhash "Keys" (list-delete cols 0))
    (for (j 2 (length cols))
	 (outhash (nth cols j)
		  (mapfor (i lenraw 2 -1) (comma-parser (nth j rawdata i)))))
    (csv-junk-collector ticker)
    outhash))	 

#? (yahoo-pad-dividends <ticker> <datelist>)
;; creates a vector of dividends keyed by the dates in <datelist>, with 0's on
;; non divedend days (for use in fromyahoo time series)
(de yahoo-pad-dividends (ticker datelist)
  (let* ((start (car datelist))
	 (finish (last datelist))
	 (numdates (length datelist))
	 (divblok (yahoo-get-dividend ticker start finish))
	 (dividends (divblok "Dividends"))
	 (divdates (divblok "Date"))
	 (out (makelist numdates 0)))
    (cond
     ((not (null dividends))
      (let* ((places (find-index datelist divdates)))
	(for (i 1 (length dividends))
	     (setq out (list-replace out (nth dividends i) (1+ (nth places i))))))))
    out))

#? (yahoo-get-now <ticker>)
;; returns yahoo's price for a given <ticker> now
(de yahoo-get-now (ticker)
  (sys (concat "wget -q \"http://download.finance.yahoo.com/d/table.csv" 
	       (concat "?s=" ticker "&f=sl1d1t1c1ohgv&e=.csv\" -O " 
		     datadir "/"  ticker ".CSV"))))

#? (yahoo-get-historical <ticker> <start> <finish>)
;; <ticker> is a string representing the stock ticker
;;<start> <finish> are dates
;; returns a hashtable with the complete available data from yahoo
(de yahoo-get-historical-old (ticker start finish res)
  (sys (build-yahoo-query ticker start finish res))
  (let* ((rawdata (read-lines (concat ticker ".CSV")))
	 (lenraw (length rawdata))
	 (cols (csv-decode (cadr rawdata) ))
	 (outhash (htable)))
    (outhash "Date" (mapfor (i lenraw 2 -1) (let ((d (date-getter (nth i rawdata)))) )))
    
    (outhash "Keys" (list-delete cols 0))
    (for (j 2 (length cols))
	 (outhash (nth cols j)
		  (mapfor (i lenraw 2 -1) (comma-parser (nth i rawdata ) j))))
    (csv-junk-collector ticker)
    outhash))

#? (yahoo-get-historical <ticker> <start> <finish>)
;; <ticker> is a string representing the stock ticker
;;<start> <finish> are dates
;; returns a list where first row is column labels and remaining data 
(de yahoo-get-historical (ticker start finish res)
  (sys (build-yahoo-query ticker start finish res))
  (let* ((rawdata (read-lines (concat ticker ".CSV")))
	 (cols (csv-decode (car rawdata)))
	 (ncols (length cols))
	 (nrows (length rawdata))
	 (d (double-array nrows ncols))
	 (*stdtd*     (date-to-day start)))
    (for (i 1 (- nrows 1))
	 (let* ((row (csv-decode (nth i rawdata) 
				 "," t yahoo-finance-table-fmt))
		(dt (date-to-day (string-to-date (nth 0 row) 'year 'day)))
		)
	   (d (- i 1) 0 (* (- dt *stdtd*) *spd*))
					;(d (- i 1) 0 (str-date-to-num (nth 0 row)))
	   (for (j 1 (- ncols 1))
		(d (- i 1) j (nth j row)))))
    (list cols d)))

(defun read-finance-data ()
  (let ((m (double-array 500 12))
        (n 0) )
    (do ((line (lines *finance.dat*)))
      (let* ((ds (str-split line "\t"))
             ((mon day yr) (str-split (car ds) "/"))
             (date (string-to-date (sprintf "%s-%s-%s" yr mon day) 'year 'day))
             (row (idx-select m 0 n))
             (d0 (* (- (date-to-day date) *dtd2000*) *spd*)) )
        (row () (cons n (cons d0 (mapcar val (cdr ds)))))
        (incr n)))
    (idx-trim! m 0 0 n)
    m))


;   (mapcar (lambda (l) (csv-decode l "," t yahoo-finance-table-fmt)) (cdr rawdata)))))

#? (build-yahoo-query <ticker> <start> <finish>)
;; returns the string needed to make the query to yahoo; only split out for debugging reasons
;; Where <start> and <finish> are instances of date class
;; <res> is <d> for daily or <m> for monthly or <w> for weekly
(de build-yahoo-query (ticker start finish res)
  (let* ((stt (date-splitter start))
	 (fin (date-splitter finish))
	 (sy (str (caddr stt)))
	 (fy (str (caddr fin)))
	 (sm (yahoo-month-fixer (car stt)))
	 (fm (yahoo-month-fixer (car fin)))
	 (sd (str (cadr stt)))
	 (fd (str (cadr fin))))
  (concat "wget -q \"http://ichart.finance.yahoo.com/table.csv?s=" ticker "&d=" fm "&e=" fd "&f=" fy 
	  "&a=" sm "&b=" sd "&c=" sy 
	  "&g=" res "&ignore=.csv\" -O " ticker ".CSV")))

#? (build-dividend-query <ticker> <start> <finish>)
;;http://ichart.finance.yahoo.com/table.csv?s=MO&a=00&b=2&c=1970&d=08&e=27&f=2008&g=v&ignore=.csv
(de build-dividend-query (ticker start finish)
  (let* ((stt (date-splitter start))
	 (fin (date-splitter finish))
	 (sy (str (caddr stt)))
	 (fy (str (caddr fin)))
	 (sm (yahoo-month-fixer (car stt)))
	 (fm (yahoo-month-fixer (car fin)))
	 (sd (str (cadr stt)))
	 (fd (str (cadr fin))))
  (concat "wget -q \"http://ichart.finance.yahoo.com/table.csv?s=" ticker "&a=" sm "&b=" sd "&c=" sy "&d=" fm "&e=" fd "&f=" fy 
	  "&g=v&ignore=.csv\" -O " ticker ".CSV")))

#? (yahoo-month-fixer <n>)
;; whoever was responsible for formatting the month query at yahoo needs to be clubbed to death
;; for their fur. 
(de yahoo-month-fixer (n)
  (cond
   ((>= n 11) (str (1- n)))
   (t (concat "0" (str (1- n))))))

#? (csv-junk-collector <name>)
;; for removing ticker CSV's returned by wget
(de csv-junk-collector (name)
    (sys (concat "rm -f " datadir "/" name ".CSV")))

#? (comma-parser list n)
;; splits up a list of text into sublists by commas
;; returns the <n> th value
(de comma-parser (list n)
  (val (nth (comma-splitter list) n)))

(de comma-splitter (in)
  (regex-split "[^,]+" in))

#? (spdr-parser <name>)
;; gets a spdr by <name>. spdr names are "xl()" where () can be u v k f i e p y b
;;
;; returns (tickers) . (fraction)
;;
;; spdr values can be gotten at:
;; http://www.sectorspdr.com/content/?do=indexComposition&symbol=XLY&filetype=csv
;;
;; this is probably useless for anyone unless they're doing index-arb -I'll eventually make
;; it get the data automagically
;;
(de spdr-parser (name)
  (let* ((thedata (read-lines (concat "datasets/spdrs/" name ".csv")))
	 (nlines (length thedata))
	 (tickers (mapfor (i 2 nlines)
		    (nth (tab-splitter (nth thedata i)) 3)))
	 (fraction (mapfor (i 2 nlines)
		     (/ (tab-parser (nth thedata i) 4) 100))))
    (cons tickers fraction)))

	 
#? (tab-parser text n) 
;; selects a numeric element from a tab seperated text
(de tab-parser (list n)
  (val (nth (tab-splitter list) n)))

#? (tab-splitter text) 
;; splits up some text into sublists by tab
(de tab-splitter (in)
  (regex-split "[^\t]+" in))

#? (date-getter <line>) 
;; changes the dates in yahoo's format on a line of its CSV to date
;; objects
(de date-getter (line)
  (string-to-date (nth 1 (regex-split  "[^-]+[^,]+" line)) 'year 'day))

#? (date-splitter <date>)
;; returns simple list (mm dd yyyy) from <date>
(de date-splitter (datein)
  (let ((dt (split-date datein)))
 (list (alist-get 'month dt)
       (alist-get 'day dt) 
       (+ 1900 (alist-get 'year dt)))))

(de str-date-to-num (s) 
  (str-val (str-join "" (regex-extract  "([0-9]+)-([0-9]+)-([0-9]+)" s))))

(de ticker-number (ticker)
  (str-join "" (mapcar str (explode-chars ticker))))

(de ticker-number-string (ticker-num)
  (str-join "" (reverse (let ((s ticker-num) (r '()))(for (i 0 (- (length s)1) 2)  (setq r (cons (chr (str-val (str-mid s i 2))) r)))))))


#? (oanda-getter currency exchange start finish)
;; gets the oanda data from the website using <currency> and <exchange> currency 
;; with <start> <finish> being dates
;;
;; returns the currency pair ratio consed with the corresponding dates
;;
;; oanda changes a lot, so by the time you see this, it may no longer work!
(de oanda-getter (currency exchange start finish)
  (sys (oanda-string currency exchange (date-add-day start -1) finish))
  (let* ((pairs (glob "(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)([0-9][0-9]).*$" 
		      (read-lines (concat exchange currency ".CSV")))))
    (csv-junk-collector (concat exchange currency))
    (cons
     (mapfor (i 1 (length pairs)) (comma-parser (nth pairs i) 2))
     (mapfor (i 1 (length pairs)) 
       (oanda-dates (car (regex-split "[^,]+" (nth pairs i))))))))


(de oanda-dates (in)
  (let* ((dt (regex-split "[^/]+" in))
	 (month (nth dt 1))
	 (day (nth dt 2))
	 (year (nth dt 3))
	 (dtstr (concat year "-" month "-" day)))
    (string-to-date dtstr 'year 'day)))
	 

(de oanda-string (currency exchange start finish)
(concat "wget -q \"http://www.oanda.com/convert/fxhistory?lang=en"
	       "&date=" (date-to-oanda finish)
	       "&margin_fixed=0&expr=" currency
	       "&exch2=&exch=" exchange
	       "&date1=" (date-to-oanda start) 
	       "&format=CSV&redirected=1\" -O "
      exchange currency ".CSV"))


(de date-to-oanda (datein)
  (date-to-string datein "%D"))
    
;;old oanda date format
(de date-to-oanda2 (datein)
  (let ((startsplit (date-splitter datein)))
    (concat (str (nth 0 startsplit)) "%2F" (str (nth 1 startsplit))
	    "%2F" (str (nth 2 startsplit)) "%2F")))
