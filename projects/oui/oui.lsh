#? *** oui parser tool kit 
;;see load-oui for main entry point

(defun read-oui-line (oui-txt)
  (reading oui-txt
    (let ((one (read-string "~\t\n"))
	  (two (read-string "~\t\n"))
	  (skip (skip-char "\t"))  
	  (three (read-string "~\t\n")))
      (skip-char "\t") (skip-char "\t\n") 
      (list one three))))


(defun read-oui-rec (oui-txt)
  (let ((one (read-oui-line oui-txt)))
    (if (= (car one) "") ()
    (list
     (car (str-split (car one) " ")) (cadr one)
     (str-join "\n" (list (cadr (read-oui-line oui-txt))
	      (car (read-oui-line oui-txt)) (car (read-oui-line oui-txt)) 
	      (car (read-oui-line oui-txt)) (car (read-oui-line oui-txt))))))))

#? (load-oui <path to oui file>)
;; Parses oui file from http://standards.ieee.org/develop/regauth/oui/oui.txt
;; and return a htable indexed by oui
(defun load-oui (oui-file)
  (let ((oui-txt (open-read oui-file))
	(oui (htable))
	(oui-rec t))
    (while oui-rec
      (setq oui-rec  (read-oui-rec oui-txt))
      (when oui-rec (oui (car oui-rec) (cdr oui-rec))))
    oui))
;;(let ((h (load-oui "oui.txt"))) (print (h "00-00-00")))
