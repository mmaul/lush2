

#? *** Database binding for PostgreeSQL
;; This is an interface to the Postgresql database package

(defnamespace pgsql- '((PGsomething -int-)))
(libload "pgsql-config")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(in-namespace pgsql- 


;;//----------------------------------- utility fns
;;  fun isNull[t]: t -> bool = "(0==$1)";
;;  proc hex_of[t]: t = """printf("(HEX:%x)",(unsigned int)$1);""";
;;  const Null[t]:t = "NULL";
;;//----------------------------------- types and data structures  
;; type pgconn = "PGconn";
;; type pgconn_ptr = "PGconn *";
;; type pgresult_ptr = "PGresult *";
;; cenum ConnStatusType =
;;	CONNECTION_OK,
;;	CONNECTION_BAD,
;;	/* Non-blocking mode only below here */
;;	CONNECTION_STARTED,           /* Waiting for connection to be made.  */
;;	CONNECTION_MADE,              /* Connection OK; waiting to send.	   */
;;	CONNECTION_AWAITING_RESPONSE, /* Waiting for a response */
;;	CONNECTION_AUTH_OK,           /* Received authentication; */
;;	CONNECTION_SETENV,            /* Negotiating environment. */
;;	CONNECTION_SSL_STARTUP,       /* Negotiating SSL. */
;;	CONNECTION_NEEDED;             /* Internal state: connect() needed */
;;  typedef conn_status_type = ConnStatusType;

;;  cenum PostgresPollingStatusType =
;;	PGRES_POLLING_FAILED,
;;	PGRES_POLLING_READING,		/* These two indicate that one may	  */
;;	PGRES_POLLING_WRITING,		/* use select before polling again.   */
;;	PGRES_POLLING_OK,
;;	PGRES_POLLING_ACTIVE;		/* unused; keep for awhile for backwards
;;								 * compatibility */
;;  typedef postgres_polling_status_type =  PostgresPollingStatusType;

  
;;  cenum ExecStatusType =
;;    PGRES_EMPTY_QUERY,        /* empty query string was executed */
;;    PGRES_COMMAND_OK,         /* a query command that doesn't return
;;                               * anything was executed properly by the backend */
;;    PGRES_TUPLES_OK,          /* a query command that returns tuples was
;;                               * executed properly by the backend, PGresult
;;                               * contains the result tuples */
;;    PGRES_COPY_OUT,           /* Copy Out data transfer in progress */
;;    PGRES_COPY_IN,            /* Copy In data transfer in progress */
;;    PGRES_BAD_RESPONSE,       /* an unexpected response was recv'd from the
;;                               * backend */
;;    PGRES_NONFATAL_ERROR,     /* notice or warning message */
;;    PGRES_FATAL_ERROR,        /* query failed */
;;    PGRES_COPY_BOTH;          /* Copy In/Out data transfer in progress */
  
;;  typedef exec_status_type =  ExecStatusType;

;;  cenum PGTransactionStatusType =
;;    PQTRANS_IDLE,    /* connection idle */
;;    PQTRANS_ACTIVE,  /* command in progress */
;;    PQTRANS_INTRANS, /* idle, within transaction block */
;;    PQTRANS_INERROR, /* idle, within failed transaction */
;;    PQTRANS_UNKNOWN; /* cannot determine status */

;;  typedef pg_transaction_status_type =  PGTransactionStatusType;
(de is-null (p)
  (declare (-gptr-) p)
  (to-bool #{ ($p == 0) #}))

#? (connectdb <connect_string>) 
;;    Connect to db and returns pgconn result. Connection string is in 
;;    key=falue key=value. Example host=/tmp/.s.PGSQL.5432 dbname=mydb
;;    format. Accepted values below:
;;      host: Name of host to connect to. If slash, it specifies Unix-domain socket
;;      hostaddr: Numeric IP address of host to connect to. 
;;      port: Port number to connect to
;;      dbname: The database name.
;;      user: PostgreSQL user name to connect as. Defaults to running os user name
;;      password: Password to be used if the server demands password authentication.
;;      connect_timeout: Maximum wait for connection, in seconds.
;;      options: Command-line options to be sent to the server.
;;      sslmode: 1 = required , 0 = optional
;;      krbsrvname: Kerberos service name to use with Kerberos 5 or GSSAPI.
;;      gsslib: GSS library to use for GSSAPI authentication.
;;      service: Service name to use for additional parameters. 
;;               It specifies a service name in pg_service.conf.
;;    If the server connection attempt fails (as indicated by PQstatus), the application 
;;    should call PQfinish to free the memory used by the PGconn object. 

(de connectdb  (connstr) 
  (declare (-str-) connstr)
  (let ((pgconn (to-gptr ()))) (declare (-gptr- "PGconn *") pgconn)
    #{ $pgconn = PQconnectdb((const char *)$connstr); #}
    (when (is-null pgconn) (error (str-cat "Error connecting to DB:" connstr)))
    pgconn 
  )
) 

;;  publish """
;;    Closes the connection to the server. Also frees memory used by the PGconn object.
;;    The PGconn pointer must not be used again after PQfinish has been called.
;;"""
;;  proc pq_finish: pgconn_ptr = "PQfinish($1);";
;;           
;;  publish """
;;    Resets the communication channel to the server.
;;""";;
;;  proc pq_reset: pgconn_ptr = "PQreset($1);";
;;
;;  publish """
;;    Returns the status of the connection. For blocking mode should be 
;;    CONNECTION_OK or CONNECTION_BAD
;;"""
;;  gen pq_status: pgconn_ptr->conn_status_type = "PQstatus($1)";
;;
;;  publish """
;;    Returns the current in-transaction status of the server.
;;"""
;;  gen pq_transaction_status: pgconn_ptr->pg_transaction_status_type = 
;;    " PGTransactionStatusType PQtransactionStatus($1)";
;;
;;
;;  publish """ connection:pgconn_ptr,command:string
;;    Submits a command to the server and waits for the result. May return NULL pointer for
;;    fatal errors. Use PQerrorMessage to get more information about such errors.
;;    Returns a PGresult pointer or possibly a null pointer. A non-null pointer will 
;;    generally be returned except in out-of-memory conditions or serious errors such as 
;;    inability to send the command to the server. If a null pointer is returned, it 
;;    should be treated like a PGRES_FATAL_ERROR result. Use PQerrorMessage to get more 
;;    information about such errors.It is allowed to include multiple SQL commands 
;;    (separated by semicolons) in the command string.
;;"""
;;  gen pq_exec: pgconn_ptr*string-> pgresult_ptr ="PQexec($1,(const char *)$2.c_str())";
;;            
;;
;;  publish """ PQresultStatus pgresult_ptr
;;    Returns the result status of the command. Can return one of the following values:
;;       PQresultStatus 
;;    PGRES_EMPTY_QUERY
;;        The string sent to the server was empty.
;;    PGRES_COMMAND_OK
;;        Successful completion of a command returning no data.
;;    PGRES_TUPLES_OK
;;        Successful completion of a command returning data (such as a SELECT or SHOW).
;;    PGRES_COPY_OUT
;;        Copy Out (from server) data transfer started.
;;    PGRES_COPY_IN
;;        Copy In (to server) data transfer started.
;;    PGRES_BAD_RESPONSE
;;        The server's response was not understood.
;;    PGRES_NONFATAL_ERROR
;;        A nonfatal error (a notice or warning) occurred.
;;    PGRES_FATAL_ERROR
;;        A fatal error occurred.
;;
;;"""
;;   gen pq_result_status: pgresult_ptr->exec_status_type = "PQresultStatus($1)";
;;
;; 
;;publish """PQresStatus exec_status_type
;;    Converts the enumerated type returned by PQresultStatus into a string constant 
;;    describing the status code. The caller should not free the result.
;;"""
;;    gen pq_res_status: exec_status_type->string = "std::string(PQresStatus($1))";
;;            
;;
;;publish """PQresultErrorMessage
;;    Returns the error message associated with the command, or an empty string if 
;;    there was no error.
;;"""
;;    gen pq_result_error_message: pgresult_ptr->string = "std::string(PQresultErrorMessage($1))";
;;            

;;   publish """PQclear
;;    Frees the storage associated with a PGresult. Every command result should be freed 
;;    via PQclear when it is no longer needed.
;;"""
;;   proc pq_clear: pgresult_ptr = "PQclear($1);";

;;  publish """PQntuples pgresult_ptr
;;    Returns the number of rows (tuples) in the query result. Because it returns an 
;;    integer result, large result sets might overflow the return value on 32-bit 
;;    operating systems.
;;"""
;;   gen pq_ntuples: pgresult_ptr->int = "PQntuples($1)";
;;           

;;  publish """PQnfields pgresult_ptr
;;    Returns the number of columns (fields) in each row of the query result.
;;"""
;;  gen pq_nfields: pgresult_ptr->int = "PQnfields($1)";
           

;;  publish """PQfname pgresult_ptr col_num:int
;;    Returns the column name associated with the given column number. Column numbers 
;;    start at 0. The caller should not free the result directly. It will be freed 
;;    when the associated PGresult handle is passed to PQclear.
;;"""
;;  gen pq_fname: pgresult_ptr*int->string = "std::string(PQfname($1,$2))";

;;publish """PQfnumber pgresult_ptr col_name:string
;;  Returns the column number associated with the given column name.
;;    -1 is returned if the given name does not match any column.
;;"""
;;   gen pq_fnumber: pgresult_ptr*string->int = "PQfnumber($1,(const char *)$2.c_str())";


;;publish """           
;;    Returns the OID of the table from which the given column was fetched. Column numbers start at 0.

;;            Oid PQftable(const PGresult *res,
;;                         int column_number);
           

;;    InvalidOid is returned if the column number is out of range, or if the specified column is not a simple reference to a table column, or when using pre-3.0 protocol. You can query the system table pg_class to determine exactly which table is referenced.

;;    The type Oid and the constant InvalidOid will be defined when you include the libpq header file. They will both be some integer type.
;;PQftablecol

;;    Returns the column number (within its table) of the column making up the specified query result column. Query-result column numbers start at 0, but table columns have nonzero numbers.

;;           int PQftablecol(const PGresult *res,
;;                           int column_number);
           

;;    Zero is returned if the column number is out of range, or if the specified column is not a simple reference to a table column, or when using pre-3.0 protocol.
;;PQfformat

;;    Returns the format code indicating the format of the given column. Column numbers start at 0.

;;            int PQfformat(const PGresult *res,
;;                          int column_number);
           

;;    Format code zero indicates textual data representation, while format code one indicates binary representation. (Other codes are reserved for future definition.)
;;PQftype

;;    Returns the data type associated with the given column number. The integer returned is the internal OID number of the type. Column numbers start at 0.

;;            Oid PQftype(const PGresult *res,
;;                        int column_number);
           

;;    You can query the system table pg_type to obtain the names and properties of the various data types. The OIDs of the built-in data types are defined in the file src/include/catalog/pg_type.h in the source tree.
;;PQfmod

;;    Returns the type modifier of the column associated with the given column number. Column numbers start at 0.

;;            int PQfmod(const PGresult *res,
;;                       int column_number);
           

;;    The interpretation of modifier values is type-specific; they typically indicate precision or size limits. The value -1 is used to indicate "no information available". Most data types do not use modifiers, in which case the value is always -1.
;;PQfsize

;;    Returns the size in bytes of the column associated with the given column number. Column numbers start at 0.

;;            int PQfsize(const PGresult *res,
;;                        int column_number);
           

;;    PQfsize returns the space allocated for this column in a database row, in other words the size of the server's internal representation of the data type. (Accordingly, it is not really very useful to clients.) A negative value indicates the data type is variable-length.
;;PQbinaryTuples

;;    Returns 1 if the PGresult contains binary data and 0 if it contains text data.

;;            int PQbinaryTuples(const PGresult *res);
           

;;    This function is deprecated (except for its use in connection with COPY), because it is possible for a single PGresult to contain text data in some columns and binary data in others. PQfformat is preferred. PQbinaryTuples returns 1 only if all columns of the result are binary (format 1).
;;"""

;;publish """PQgetvalue pgresult_ptr*row_number:int*column_number:int->string
;;    Returns a single field value of one row of a PGresult. Row and column numbers start 
;;    at 0. The caller should not free the result directly. It will be freed when the 
;;    associated PGresult handle is passed to PQclear.

;;    For data in text format, the value returned by PQgetvalue is a null-terminated 
;;    character string representation of the field value. For data in binary format, 
;;    the value is in the binary representation

;;    An empty string is returned if the field value is null. See PQgetisnull to 
;;    distinguish null values from empty-string values.
;;"""
;;  gen pq_getvalue: pgresult_ptr*int*int->string = "std::string(PQgetvalue($1,$2,$3))";

;;  publish """ PQgetisnull

;;    Tests a field for a null value. Row and column numbers start at 0.

;;            int PQgetisnull(const PGresult *res,
;;                            int row_number,
;;                            int column_number);
           

;;    This function returns 1 if the field is null and 0 if it contains a non-null value. (Note that PQgetvalue will return an empty string, not a null pointer, for a null field.)
;;PQgetlength

;;    Returns the actual length of a field value in bytes. Row and column numbers start at 0.

;;            int PQgetlength(const PGresult *res,
;;                            int row_number,
;;                            int column_number);
           

;;    This is the actual data length for the particular data value, that is, the size of the object pointed to by PQgetvalue. For text data format this is the same as strlen(). For binary format this is essential information. Note that one should not rely on PQfsize to obtain the actual data length.
;;PQnparams

;;    Returns the number of parameters of a prepared statement.

;;            int PQnparams(const PGresult *res);
           

;;    This function is only useful when inspecting the result of PQdescribePrepared. For other types of queries it will return zero.
;;PQparamtype

;;    Returns the data type of the indicated statement parameter. Parameter numbers start at 0.

;;            Oid PQparamtype(const PGresult *res, int param_number);
           

;;    This function is only useful when inspecting the result of PQdescribePrepared. For other types of queries it will return zero.
;;PQprint

;;    Prints out all the rows and, optionally, the column names to the specified output stream.

;;    void PQprint(FILE *fout,      /* output stream */
;;                 const PGresult *res,
;;                 const PQprintOpt *po);
;;    typedef struct {
;;      pqbool  header;      /* print output field headings and row count */
;;      pqbool  align;       /* fill align the fields */
;;      pqbool  standard;    /* old brain dead format */
;;      pqbool  html3;       /* output HTML tables */
;;      pqbool  expanded;    /* expand tables */
;;      pqbool  pager;       /* use pager for output if needed */
;;      char    *fieldSep;   /* field separator */
;;      char    *tableOpt;   /* attributes for HTML table element */
;;      char    *caption;    /* HTML table caption */
;;      char    **fieldName; /* null-terminated array of replacement field names */
;;    } PQprintOpt;
           

;;    This function was formerly used by psql to print query results, but this is no longer the case. Note that it assumes all the data is in text format.

;;30.3.3. Retrieving Result Information for Other Commands

;;These functions are used to extract information from PGresult objects that are not SELECT results.

;;PQcmdStatus

;;    Returns the command status tag from the SQL command that generated the PGresult.

;;            char *PQcmdStatus(PGresult *res);
           

;;    Commonly this is just the name of the command, but it might include additional data such as the number of rows processed. The caller should not free the result directly. It will be freed when the associated PGresult handle is passed to PQclear.
;;PQcmdTuples

;;    Returns the number of rows affected by the SQL command.

;;            char *PQcmdTuples(PGresult *res);
           

;;    This function returns a string containing the number of rows affected by the SQL statement that generated the PGresult. This function can only be used following the execution of an INSERT, UPDATE, DELETE, MOVE, FETCH, or COPY statement, or an EXECUTE of a prepared query that contains an INSERT, UPDATE, or DELETE statement. If the command that generated the PGresult was anything else, PQcmdTuples returns an empty string. The caller should not free the return value directly. It will be freed when the associated PGresult handle is passed to PQclear.
;;PQoidValue

;;    Returns the OID of the inserted row, if the SQL command was an INSERT that inserted exactly one row into a table that has OIDs, or a EXECUTE of a prepared query containing a suitable INSERT statement. Otherwise, this function returns InvalidOid. This function will also return InvalidOid if the table affected by the INSERT statement does not contain OIDs.

;;            Oid PQoidValue(const PGresult *res);
           

;;PQoidStatus

;;    Returns a string with the OID of the inserted row, if the SQL command was an INSERT that inserted exactly one row, or a EXECUTE of a prepared statement consisting of a suitable INSERT. (The string will be 0 if the INSERT did not insert exactly one row, or if the target table does not have OIDs.) If the command was not an INSERT, returns an empty string.

;;            char *PQoidStatus(const PGresult *res);
           

;;    This function is deprecated in favor of PQoidValue. It is not thread-safe.

;;30.3.4. Escaping Strings for Inclusion in SQL Commands

;;PQescapeStringConn escapes a string for use within an SQL command. This is useful when inserting data values as literal constants in SQL commands. Certain characters (such as quotes and backslashes) must be escaped to prevent them from being interpreted specially by the SQL parser. PQescapeStringConn performs this operation.

;;    Tip: It is especially important to do proper escaping when handling strings that were received from an untrustworthy source. Otherwise there is a security risk: you are vulnerable to "SQL injection" attacks wherein unwanted SQL commands are fed to your database.

;;Note that it is not necessary nor correct to do escaping when a data value is passed as a separate parameter in PQexecParams or its sibling routines.

;;     size_t PQescapeStringConn (PGconn *conn,
;;                                char *to, const char *from, size_t length,
;;                                int *error);
;;    

;;PQescapeStringConn writes an escaped version of the from string to the to buffer, escaping special characters so that they cannot cause any harm, and adding a terminating zero byte. The single quotes that must surround PostgreSQL string literals are not included in the result string; they should be provided in the SQL command that the result is inserted into. The parameter from points to the first character of the string that is to be escaped, and the length parameter gives the number of bytes in this string. A terminating zero byte is not required, and should not be counted in length. (If a terminating zero byte is found before length bytes are processed, PQescapeStringConn stops at the zero; the behavior is thus rather like strncpy.) to shall point to a buffer that is able to hold at least one more byte than twice the value of length, otherwise the behavior is undefined. Behavior is likewise undefined if the to and from strings overlap.

;;If the error parameter is not NULL, then *error is set to zero on success, nonzero on error. Presently the only possible error conditions involve invalid multibyte encoding in the source string. The output string is still generated on error, but it can be expected that the server will reject it as malformed. On error, a suitable message is stored in the conn object, whether or not error is NULL.

;;PQescapeStringConn returns the number of bytes written to to, not including the terminating zero byte.

;;     size_t PQescapeString (char *to, const char *from, size_t length);
    

;;PQescapeString is an older, deprecated version of PQescapeStringConn; the difference is that it does not take conn or error parameters. Because of this, it cannot adjust its behavior depending on the connection properties (such as character encoding) and therefore it might give the wrong results. Also, it has no way to report error conditions.

;;PQescapeString can be used safely in single-threaded client programs that work with only one PostgreSQL connection at a time (in this case it can find out what it needs to know "behind the scenes"). In other contexts it is a security hazard and should be avoided in favor of PQescapeStringConn.
;;30.3.5. Escaping Binary Strings for Inclusion in SQL Commands

;;PQescapeByteaConn

;;    Escapes binary data for use within an SQL command with the type bytea. As with PQescapeStringConn, this is only used when inserting data directly into an SQL command string.

;;            unsigned char *PQescapeByteaConn(PGconn *conn,
;;                                             const unsigned char *from,
;;                                             size_t from_length,
;;                                             size_t *to_length);
           

;;    Certain byte values must be escaped (but all byte values can be escaped) when used as part of a bytea literal in an SQL statement. In general, to escape a byte, it is converted into the three digit octal number equal to the octet value, and preceded by usually two backslashes. The single quote (') and backslash (\) characters have special alternative escape sequences. See Section 8.4 for more information. PQescapeByteaConn performs this operation, escaping only the minimally required bytes.

;;    The from parameter points to the first byte of the string that is to be escaped, and the from_length parameter gives the number of bytes in this binary string. (A terminating zero byte is neither necessary nor counted.) The to_length parameter points to a variable that will hold the resultant escaped string length. This result string length includes the terminating zero byte of the result.

;;    PQescapeByteaConn returns an escaped version of the from parameter binary string in memory allocated with malloc(). This memory must be freed using PQfreemem() when the result is no longer needed. The return string has all special characters replaced so that they can be properly processed by the PostgreSQL string literal parser, and the bytea input function. A terminating zero byte is also added. The single quotes that must surround PostgreSQL string literals are not part of the result string.

;;    On error, a NULL pointer is returned, and a suitable error message is stored in the conn object. Currently, the only possible error is insufficient memory for the result string.
;;PQescapeBytea

;;    PQescapeBytea is an older, deprecated version of PQescapeByteaConn.

;;            unsigned char *PQescapeBytea(const unsigned char *from,
;;                                         size_t from_length,
;;                                         size_t *to_length);
           

;;    The only difference from PQescapeByteaConn is that PQescapeBytea does not take a PGconn parameter. Because of this, it cannot adjust its behavior depending on the connection properties (in particular, whether standard-conforming strings are enabled) and therefore it might give the wrong results. Also, it has no way to return an error message on failure.

;;    PQescapeBytea can be used safely in single-threaded client programs that work with only one PostgreSQL connection at a time (in this case it can find out what it needs to know "behind the scenes"). In other contexts it is a security hazard and should be avoided in favor of PQescapeByteaConn.
;;PQunescapeBytea

;;    Converts a string representation of binary data into binary data — the reverse of PQescapeBytea. This is needed when retrieving bytea data in text format, but not when retrieving it in binary format.

;;            unsigned char *PQunescapeBytea(const unsigned char *from, size_t *to_length);
           

;;    The from parameter points to a string such as might be returned by PQgetvalue when applied to a bytea column. PQunescapeBytea converts this string representation into its binary representation. It returns a pointer to a buffer allocated with malloc(), or null on error, and puts the size of the buffer in to_length. The result must be freed using PQfreemem when it is no longer needed.

;;    This conversion is not exactly the inverse of PQescapeBytea, because the string is not expected to be "escaped" when received from PQgetvalue. In particular this means there is no need for string quoting considerations, and so no need for a PGconn parameter.
;;PQfreemem

;;    Frees memory allocated by libpq.

;;            void PQfreemem(void *ptr);
           

;;    Frees memory allocated by libpq, particularly PQescapeByteaConn, PQescapeBytea, PQunescapeBytea, and PQnotifies. It is particularly important that this function, rather than free(), be used on Microsoft Windows. This is because allocating memory in a DLL and releasing it in the application works only if multithreaded/single-threaded, release/debug, and static/dynamic flags are the same for the DLL and the application. On non-Microsoft Windows platforms, this function is the same as the standard library function free().

;;""";


;;}
;;(eval `(de headers () ,pgsql-libpq-fe-h ()))
(de headers ()
  (cpheader "#include <libpq-fe.h>")
  ())
)

(defvar pgsqlfunclist '("is-null" "connectdb"))
;;(with-namespace lush1-
;;(let ((dhc-make-lushflags (concat dhc-make-lushflags pgsql-cflags)))
;;  (dhc-make-all ()
;;                (mapcar named pgsqlfunclist)
;;                (list pgsql-libpq) ) )
;)

(dhc-make-with-libs () ;;"pgsql"
                    (list pgsql-libpq)
                    pgsql-headers
                    pgsql-is-null
                    pgsql-connectdb
)
 