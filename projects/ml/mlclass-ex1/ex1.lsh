(defparameter *gnuplotdata* "/home/mmaul/hacking/lush/lush/lush2/demos/gnuplot/")
;; generic function
(defun read-xyz-data (filename)
  (let ((v ()) (m ()) (ms ()) 
	(lastline ()) (line ()) )
    (reading (open-read filename)
      ;; read lines
      (while (<> (skip-char "") "\e")
        (setq line (str-strip (read-string)))
        (read-string 1) ;; read newline character
        (cond 
         ;; ignore comment line
         ((str-startswith line "#") 
          ()) 
         
         ;; turn list of columns into a matrix
         ((and (= line "") (= lastline ""))
          (mapc idx-lift! m 1s)
          (setq ms (cons (apply mat-catcols (reverse m)) ms))
          (setq m ()) )
         
         ;; add another column-vector to m
         ((= line "")
          (mapc idx-lift! v 1s)
          (setq m (cons (apply mat-catcols (reverse v)) m))
          (setq v ()) )
	 
         ;; read line with xyz data
         (t
          (let ((i (str-find "#" line)))
            (when i (setq line (str-left line i)) ))
          (setq v (cons (reading-string (concat "[" line "]") (read)) v)) ))
        (setq lastline line)) )
    (if ms (reverse ms)
      (if m (reverse m)
        (mapc idx-lift! v 1s)
        (apply mat-catcols (reverse v)) ))))

;; read data in finance.dat
(defun read-finance-data ()
  (let ((m (double-array 500 12))
        (n 0) )
    (do ((line (lines *finance.dat*)))
      (let* ((ds (str-split line "\t"))
             ((mon day yr) (str-split (car ds) "/"))
             (date (string-to-date (sprintf "%s-%s-%s" yr mon day) 'year 'day))
             (row (idx-select m 0 n))
             (d0 (* (- (date-to-day date) *dtd2000*) *spd*)) )
        (row () (cons n (cons d0 (mapcar val (cdr ds)))))
        (incr n)))
    (idx-trim! m 0 0 n)
    m))

(let ((d htable))
(do (line (lines "/var/log/messages.log"))
  (let ((parts (str-split line)))
    (print (car parts)))) 